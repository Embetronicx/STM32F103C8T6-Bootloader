
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002760  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800286c  0800286c  0001286c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b14  08002b14  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002b14  08002b14  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b14  08002b14  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000078  08002b90  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08002b90  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d6c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af2  00000000  00000000  00027e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000048aa  00000000  00000000  000298fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  0002e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000768  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a75  00000000  00000000  0002f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009de6  00000000  00000000  00046b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083c0c  00000000  00000000  000508fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d4507  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ab0  00000000  00000000  000d4558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002854 	.word	0x08002854

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002854 	.word	0x08002854

0800014c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800014c:	b530      	push	{r4, r5, lr}
 800014e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000150:	2400      	movs	r4, #0
 8000152:	9404      	str	r4, [sp, #16]
 8000154:	9405      	str	r4, [sp, #20]
 8000156:	9406      	str	r4, [sp, #24]
 8000158:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800015a:	4b18      	ldr	r3, [pc, #96]	; (80001bc <MX_GPIO_Init+0x70>)
 800015c:	699a      	ldr	r2, [r3, #24]
 800015e:	f042 0210 	orr.w	r2, r2, #16
 8000162:	619a      	str	r2, [r3, #24]
 8000164:	699a      	ldr	r2, [r3, #24]
 8000166:	f002 0210 	and.w	r2, r2, #16
 800016a:	9201      	str	r2, [sp, #4]
 800016c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800016e:	699a      	ldr	r2, [r3, #24]
 8000170:	f042 0208 	orr.w	r2, r2, #8
 8000174:	619a      	str	r2, [r3, #24]
 8000176:	699a      	ldr	r2, [r3, #24]
 8000178:	f002 0208 	and.w	r2, r2, #8
 800017c:	9202      	str	r2, [sp, #8]
 800017e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000180:	699a      	ldr	r2, [r3, #24]
 8000182:	f042 0204 	orr.w	r2, r2, #4
 8000186:	619a      	str	r2, [r3, #24]
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	f003 0304 	and.w	r3, r3, #4
 800018e:	9303      	str	r3, [sp, #12]
 8000190:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000192:	4d0b      	ldr	r5, [pc, #44]	; (80001c0 <MX_GPIO_Init+0x74>)
 8000194:	4622      	mov	r2, r4
 8000196:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019a:	4628      	mov	r0, r5
 800019c:	f000 fe4e 	bl	8000e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001a4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001a6:	2301      	movs	r3, #1
 80001a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001aa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ac:	2302      	movs	r3, #2
 80001ae:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001b0:	a904      	add	r1, sp, #16
 80001b2:	4628      	mov	r0, r5
 80001b4:	f000 fd30 	bl	8000c18 <HAL_GPIO_Init>

}
 80001b8:	b009      	add	sp, #36	; 0x24
 80001ba:	bd30      	pop	{r4, r5, pc}
 80001bc:	40021000 	.word	0x40021000
 80001c0:	40011000 	.word	0x40011000

080001c4 <goto_application>:
    while(1);
  }
}

static void goto_application( void )
{
 80001c4:	b510      	push	{r4, lr}
	printf("Gonna Jump to Application...\n");
 80001c6:	480d      	ldr	r0, [pc, #52]	; (80001fc <goto_application+0x38>)
 80001c8:	f001 fbc0 	bl	800194c <puts>
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(ETX_APP_START_ADDRESS + 4U)));
 80001cc:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <goto_application+0x3c>)
 80001ce:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404

	if( app_reset_handler == (void*)0xFFFFFFFF )
 80001d2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001d6:	d00c      	beq.n	80001f2 <goto_application+0x2e>
	{
	  printf("Invalid Application... HALT!!!\r\n");
	  while(1);
	}

	__set_MSP(*(volatile uint32_t*) ETX_APP_START_ADDRESS);
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <goto_application+0x3c>)
 80001da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80001de:	f383 8808 	msr	MSP, r3

	// Turn OFF the Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 80001e2:	2200      	movs	r2, #0
 80001e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e8:	4806      	ldr	r0, [pc, #24]	; (8000204 <goto_application+0x40>)
 80001ea:	f000 fe27 	bl	8000e3c <HAL_GPIO_WritePin>

	app_reset_handler();    //call the app reset handler
 80001ee:	47a0      	blx	r4
}
 80001f0:	bd10      	pop	{r4, pc}
	  printf("Invalid Application... HALT!!!\r\n");
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <goto_application+0x44>)
 80001f4:	f001 fbaa 	bl	800194c <puts>
	  while(1);
 80001f8:	e7fe      	b.n	80001f8 <goto_application+0x34>
 80001fa:	bf00      	nop
 80001fc:	0800286c 	.word	0x0800286c
 8000200:	08004000 	.word	0x08004000
 8000204:	40011000 	.word	0x40011000
 8000208:	0800288c 	.word	0x0800288c

0800020c <UART_Write_Loop>:
{
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	b083      	sub	sp, #12
  char tx = 'g';
 8000210:	2367      	movs	r3, #103	; 0x67
 8000212:	f88d 3007 	strb.w	r3, [sp, #7]
  char rx = '0';
 8000216:	2330      	movs	r3, #48	; 0x30
 8000218:	f88d 3006 	strb.w	r3, [sp, #6]
  int count = 0;
 800021c:	2500      	movs	r5, #0
 800021e:	e005      	b.n	800022c <UART_Write_Loop+0x20>
    if( count == 100 )
 8000220:	2d64      	cmp	r5, #100	; 0x64
 8000222:	d024      	beq.n	800026e <UART_Write_Loop+0x62>
    count++;
 8000224:	3501      	adds	r5, #1
    HAL_Delay(20);              //20ms delay
 8000226:	2014      	movs	r0, #20
 8000228:	f000 fb20 	bl	800086c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800022c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000230:	4811      	ldr	r0, [pc, #68]	; (8000278 <UART_Write_Loop+0x6c>)
 8000232:	f000 fe09 	bl	8000e48 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart3, (uint8_t *)&tx, 1, HAL_MAX_DELAY);
 8000236:	4c11      	ldr	r4, [pc, #68]	; (800027c <UART_Write_Loop+0x70>)
 8000238:	f04f 33ff 	mov.w	r3, #4294967295
 800023c:	2201      	movs	r2, #1
 800023e:	f10d 0107 	add.w	r1, sp, #7
 8000242:	4620      	mov	r0, r4
 8000244:	f001 f9eb 	bl	800161e <HAL_UART_Transmit>
    ex = HAL_UART_Receive(&huart3, (uint8_t *)&rx, 1, 10);
 8000248:	230a      	movs	r3, #10
 800024a:	2201      	movs	r2, #1
 800024c:	f10d 0106 	add.w	r1, sp, #6
 8000250:	4620      	mov	r0, r4
 8000252:	f001 fa50 	bl	80016f6 <HAL_UART_Receive>
    if( ( ex == HAL_OK ) && ( rx == 'r' ) )
 8000256:	2800      	cmp	r0, #0
 8000258:	d1e2      	bne.n	8000220 <UART_Write_Loop+0x14>
 800025a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800025e:	2b72      	cmp	r3, #114	; 0x72
 8000260:	d1de      	bne.n	8000220 <UART_Write_Loop+0x14>
      printf("Firmware Update Started\r\n");
 8000262:	4807      	ldr	r0, [pc, #28]	; (8000280 <UART_Write_Loop+0x74>)
 8000264:	f001 fb72 	bl	800194c <puts>
      ret = 1;
 8000268:	2001      	movs	r0, #1
}
 800026a:	b003      	add	sp, #12
 800026c:	bd30      	pop	{r4, r5, pc}
      printf("No Data Received for Firmware Update\r\n");
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <UART_Write_Loop+0x78>)
 8000270:	f001 fb6c 	bl	800194c <puts>
  int ret = 0;
 8000274:	2000      	movs	r0, #0
      break;
 8000276:	e7f8      	b.n	800026a <UART_Write_Loop+0x5e>
 8000278:	40011000 	.word	0x40011000
 800027c:	200000dc 	.word	0x200000dc
 8000280:	080028ac 	.word	0x080028ac
 8000284:	080028c8 	.word	0x080028c8

08000288 <write_data_to_flash_app>:
{
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	b087      	sub	sp, #28
 800028c:	4605      	mov	r5, r0
 800028e:	460e      	mov	r6, r1
 8000290:	4614      	mov	r4, r2
    ret = HAL_FLASH_Unlock();
 8000292:	f000 fba3 	bl	80009dc <HAL_FLASH_Unlock>
    if( ret != HAL_OK )
 8000296:	4607      	mov	r7, r0
 8000298:	2800      	cmp	r0, #0
 800029a:	d134      	bne.n	8000306 <write_data_to_flash_app+0x7e>
    if( is_first_block )
 800029c:	b9e4      	cbnz	r4, 80002d8 <write_data_to_flash_app+0x50>
{
 800029e:	2400      	movs	r4, #0
    for(int i = 0; i < data_len/2; i++)
 80002a0:	ebb4 0f56 	cmp.w	r4, r6, lsr #1
 80002a4:	da2e      	bge.n	8000304 <write_data_to_flash_app+0x7c>
      uint16_t halfword_data = data[i * 2] | (data[i * 2 + 1] << 8);
 80002a6:	f815 3014 	ldrb.w	r3, [r5, r4, lsl #1]
 80002aa:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 80002ae:	7852      	ldrb	r2, [r2, #1]
                               (ETX_APP_START_ADDRESS + application_write_idx ),
 80002b0:	4918      	ldr	r1, [pc, #96]	; (8000314 <write_data_to_flash_app+0x8c>)
 80002b2:	8809      	ldrh	r1, [r1, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
 80002b4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80002b8:	2300      	movs	r3, #0
 80002ba:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80002be:	f501 4188 	add.w	r1, r1, #17408	; 0x4400
 80002c2:	2001      	movs	r0, #1
 80002c4:	f000 fbe2 	bl	8000a8c <HAL_FLASH_Program>
      if( ret == HAL_OK )
 80002c8:	4607      	mov	r7, r0
 80002ca:	b9c0      	cbnz	r0, 80002fe <write_data_to_flash_app+0x76>
        application_write_idx += 2;
 80002cc:	4a11      	ldr	r2, [pc, #68]	; (8000314 <write_data_to_flash_app+0x8c>)
 80002ce:	8813      	ldrh	r3, [r2, #0]
 80002d0:	3302      	adds	r3, #2
 80002d2:	8013      	strh	r3, [r2, #0]
    for(int i = 0; i < data_len/2; i++)
 80002d4:	3401      	adds	r4, #1
 80002d6:	e7e3      	b.n	80002a0 <write_data_to_flash_app+0x18>
      printf("Erasing the Flash memory...\r\n");
 80002d8:	480f      	ldr	r0, [pc, #60]	; (8000318 <write_data_to_flash_app+0x90>)
 80002da:	f001 fb37 	bl	800194c <puts>
      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 80002de:	2300      	movs	r3, #0
 80002e0:	9302      	str	r3, [sp, #8]
      EraseInitStruct.PageAddress   = ETX_APP_START_ADDRESS;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <write_data_to_flash_app+0x94>)
 80002e4:	9304      	str	r3, [sp, #16]
      EraseInitStruct.NbPages       = 47;                     //47 Pages
 80002e6:	232f      	movs	r3, #47	; 0x2f
 80002e8:	9305      	str	r3, [sp, #20]
      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80002ea:	a901      	add	r1, sp, #4
 80002ec:	a802      	add	r0, sp, #8
 80002ee:	f000 fc41 	bl	8000b74 <HAL_FLASHEx_Erase>
      if( ret != HAL_OK )
 80002f2:	4607      	mov	r7, r0
 80002f4:	b938      	cbnz	r0, 8000306 <write_data_to_flash_app+0x7e>
      application_write_idx = 0;
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <write_data_to_flash_app+0x8c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	801a      	strh	r2, [r3, #0]
 80002fc:	e7cf      	b.n	800029e <write_data_to_flash_app+0x16>
        printf("Flash Write Error...HALT!!!\r\n");
 80002fe:	4808      	ldr	r0, [pc, #32]	; (8000320 <write_data_to_flash_app+0x98>)
 8000300:	f001 fb24 	bl	800194c <puts>
    if( ret != HAL_OK )
 8000304:	b117      	cbz	r7, 800030c <write_data_to_flash_app+0x84>
}
 8000306:	4638      	mov	r0, r7
 8000308:	b007      	add	sp, #28
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = HAL_FLASH_Lock();
 800030c:	f000 fb80 	bl	8000a10 <HAL_FLASH_Lock>
 8000310:	4607      	mov	r7, r0
    if( ret != HAL_OK )
 8000312:	e7f8      	b.n	8000306 <write_data_to_flash_app+0x7e>
 8000314:	20000096 	.word	0x20000096
 8000318:	080028f0 	.word	0x080028f0
 800031c:	08004400 	.word	0x08004400
 8000320:	08002910 	.word	0x08002910

08000324 <Firmware_Update>:
{
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
  uint8_t x = 'x';
 800032a:	2378      	movs	r3, #120	; 0x78
 800032c:	f88d 3405 	strb.w	r3, [sp, #1029]	; 0x405
  uint8_t y = 'y';
 8000330:	2379      	movs	r3, #121	; 0x79
 8000332:	f88d 3404 	strb.w	r3, [sp, #1028]	; 0x404
  uint8_t block[MAX_BLOCK_SIZE] = { 0 };
 8000336:	2100      	movs	r1, #0
 8000338:	9101      	str	r1, [sp, #4]
 800033a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800033e:	a802      	add	r0, sp, #8
 8000340:	f001 fa76 	bl	8001830 <memset>
    if( UART_Write_Loop() != 0 )
 8000344:	f7ff ff62 	bl	800020c <UART_Write_Loop>
 8000348:	b910      	cbnz	r0, 8000350 <Firmware_Update+0x2c>
}
 800034a:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      HAL_UART_Transmit(&huart3, &y, 1, HAL_MAX_DELAY);
 8000350:	4c50      	ldr	r4, [pc, #320]	; (8000494 <Firmware_Update+0x170>)
 8000352:	f04f 33ff 	mov.w	r3, #4294967295
 8000356:	2201      	movs	r2, #1
 8000358:	f20d 4104 	addw	r1, sp, #1028	; 0x404
 800035c:	4620      	mov	r0, r4
 800035e:	f001 f95e 	bl	800161e <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart3, &yy, 1, 5000);
 8000362:	f241 3388 	movw	r3, #5000	; 0x1388
 8000366:	2201      	movs	r2, #1
 8000368:	f20d 4106 	addw	r1, sp, #1030	; 0x406
 800036c:	4620      	mov	r0, r4
 800036e:	f001 f9c2 	bl	80016f6 <HAL_UART_Receive>
      if( ex != HAL_OK )
 8000372:	4607      	mov	r7, r0
 8000374:	b128      	cbz	r0, 8000382 <Firmware_Update+0x5e>
        printf("Get application Size error (yy)...HALT!!!\r\n");
 8000376:	4848      	ldr	r0, [pc, #288]	; (8000498 <Firmware_Update+0x174>)
 8000378:	f001 fae8 	bl	800194c <puts>
  if( ex != HAL_OK )
 800037c:	2f00      	cmp	r7, #0
 800037e:	d0e4      	beq.n	800034a <Firmware_Update+0x26>
    while(1);
 8000380:	e7fe      	b.n	8000380 <Firmware_Update+0x5c>
      HAL_UART_Transmit(&huart3, &x, 1, HAL_MAX_DELAY);
 8000382:	4c44      	ldr	r4, [pc, #272]	; (8000494 <Firmware_Update+0x170>)
 8000384:	f04f 33ff 	mov.w	r3, #4294967295
 8000388:	2201      	movs	r2, #1
 800038a:	f20d 4105 	addw	r1, sp, #1029	; 0x405
 800038e:	4620      	mov	r0, r4
 8000390:	f001 f945 	bl	800161e <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart3, &xx, 1, 5000);
 8000394:	f241 3388 	movw	r3, #5000	; 0x1388
 8000398:	2201      	movs	r2, #1
 800039a:	f20d 4107 	addw	r1, sp, #1031	; 0x407
 800039e:	4620      	mov	r0, r4
 80003a0:	f001 f9a9 	bl	80016f6 <HAL_UART_Receive>
      if( ex != HAL_OK )
 80003a4:	4607      	mov	r7, r0
 80003a6:	b118      	cbz	r0, 80003b0 <Firmware_Update+0x8c>
        printf("Get application Size error(XX)...HALT!!!\r\n");
 80003a8:	483c      	ldr	r0, [pc, #240]	; (800049c <Firmware_Update+0x178>)
 80003aa:	f001 facf 	bl	800194c <puts>
        break;
 80003ae:	e7e5      	b.n	800037c <Firmware_Update+0x58>
      application_size = yy | (xx << 8);
 80003b0:	f89d 3407 	ldrb.w	r3, [sp, #1031]	; 0x407
 80003b4:	f89d 1406 	ldrb.w	r1, [sp, #1030]	; 0x406
 80003b8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80003bc:	4b38      	ldr	r3, [pc, #224]	; (80004a0 <Firmware_Update+0x17c>)
 80003be:	8019      	strh	r1, [r3, #0]
      printf("Application Size = %d bytes\r\n", application_size);
 80003c0:	4838      	ldr	r0, [pc, #224]	; (80004a4 <Firmware_Update+0x180>)
 80003c2:	f001 fa3d 	bl	8001840 <iprintf>
  uint16_t i = 0;
 80003c6:	2400      	movs	r4, #0
  uint16_t current_app_size = 0;
 80003c8:	4625      	mov	r5, r4
 80003ca:	e04d      	b.n	8000468 <Firmware_Update+0x144>
          printf("Received Block[%d]\r\n", current_app_size/MAX_BLOCK_SIZE);
 80003cc:	0aa9      	lsrs	r1, r5, #10
 80003ce:	4836      	ldr	r0, [pc, #216]	; (80004a8 <Firmware_Update+0x184>)
 80003d0:	f001 fa36 	bl	8001840 <iprintf>
          ex = write_data_to_flash_app(block, MAX_BLOCK_SIZE, (current_app_size <= MAX_BLOCK_SIZE) );
 80003d4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80003d8:	bf8c      	ite	hi
 80003da:	2200      	movhi	r2, #0
 80003dc:	2201      	movls	r2, #1
 80003de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e2:	a801      	add	r0, sp, #4
 80003e4:	f7ff ff50 	bl	8000288 <write_data_to_flash_app>
          if( ex != HAL_OK )
 80003e8:	2800      	cmp	r0, #0
 80003ea:	d151      	bne.n	8000490 <Firmware_Update+0x16c>
          memset(block, 0,MAX_BLOCK_SIZE);
 80003ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003f0:	2100      	movs	r1, #0
 80003f2:	a801      	add	r0, sp, #4
 80003f4:	f001 fa1c 	bl	8001830 <memset>
          i = 0;
 80003f8:	2400      	movs	r4, #0
        if( current_app_size >= application_size)
 80003fa:	4b29      	ldr	r3, [pc, #164]	; (80004a0 <Firmware_Update+0x17c>)
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d9bc      	bls.n	800037c <Firmware_Update+0x58>
        HAL_UART_Transmit(&huart3, &y, 1, HAL_MAX_DELAY);
 8000402:	4e24      	ldr	r6, [pc, #144]	; (8000494 <Firmware_Update+0x170>)
 8000404:	f04f 33ff 	mov.w	r3, #4294967295
 8000408:	2201      	movs	r2, #1
 800040a:	f20d 4104 	addw	r1, sp, #1028	; 0x404
 800040e:	4630      	mov	r0, r6
 8000410:	f001 f905 	bl	800161e <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart3, &yy, 1, 5000);
 8000414:	f241 3388 	movw	r3, #5000	; 0x1388
 8000418:	2201      	movs	r2, #1
 800041a:	f20d 4106 	addw	r1, sp, #1030	; 0x406
 800041e:	4630      	mov	r0, r6
 8000420:	f001 f969 	bl	80016f6 <HAL_UART_Receive>
        if( ex != HAL_OK )
 8000424:	4606      	mov	r6, r0
 8000426:	bb38      	cbnz	r0, 8000478 <Firmware_Update+0x154>
        HAL_UART_Transmit(&huart3, &x, 1, HAL_MAX_DELAY);
 8000428:	4e1a      	ldr	r6, [pc, #104]	; (8000494 <Firmware_Update+0x170>)
 800042a:	f04f 33ff 	mov.w	r3, #4294967295
 800042e:	2201      	movs	r2, #1
 8000430:	f20d 4105 	addw	r1, sp, #1029	; 0x405
 8000434:	4630      	mov	r0, r6
 8000436:	f001 f8f2 	bl	800161e <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart3, &xx, 1, 5000);
 800043a:	f241 3388 	movw	r3, #5000	; 0x1388
 800043e:	2201      	movs	r2, #1
 8000440:	f20d 4107 	addw	r1, sp, #1031	; 0x407
 8000444:	4630      	mov	r0, r6
 8000446:	f001 f956 	bl	80016f6 <HAL_UART_Receive>
        if( ex != HAL_OK )
 800044a:	4606      	mov	r6, r0
 800044c:	b9d0      	cbnz	r0, 8000484 <Firmware_Update+0x160>
        block[i++] = yy;
 800044e:	1c63      	adds	r3, r4, #1
 8000450:	b29b      	uxth	r3, r3
 8000452:	aa01      	add	r2, sp, #4
 8000454:	f89d 1406 	ldrb.w	r1, [sp, #1030]	; 0x406
 8000458:	5511      	strb	r1, [r2, r4]
        block[i++] = xx;
 800045a:	3402      	adds	r4, #2
 800045c:	b2a4      	uxth	r4, r4
 800045e:	f89d 1407 	ldrb.w	r1, [sp, #1031]	; 0x407
 8000462:	54d1      	strb	r1, [r2, r3]
        current_app_size += 2;
 8000464:	3502      	adds	r5, #2
 8000466:	b2ad      	uxth	r5, r5
        if( ( i == MAX_BLOCK_SIZE ) || ( current_app_size >= application_size) )
 8000468:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800046c:	d0ae      	beq.n	80003cc <Firmware_Update+0xa8>
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <Firmware_Update+0x17c>)
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	42ab      	cmp	r3, r5
 8000474:	d8c1      	bhi.n	80003fa <Firmware_Update+0xd6>
 8000476:	e7a9      	b.n	80003cc <Firmware_Update+0xa8>
          printf("Get application data[index:%d] error (yy)...HALT!!!\r\n", i);
 8000478:	4621      	mov	r1, r4
 800047a:	480c      	ldr	r0, [pc, #48]	; (80004ac <Firmware_Update+0x188>)
 800047c:	f001 f9e0 	bl	8001840 <iprintf>
        ex = HAL_UART_Receive(&huart3, &yy, 1, 5000);
 8000480:	4637      	mov	r7, r6
          break;
 8000482:	e77b      	b.n	800037c <Firmware_Update+0x58>
          printf("Get application data[index:%d] error(XX)...HALT!!!\r\n", i);
 8000484:	4621      	mov	r1, r4
 8000486:	480a      	ldr	r0, [pc, #40]	; (80004b0 <Firmware_Update+0x18c>)
 8000488:	f001 f9da 	bl	8001840 <iprintf>
        ex = HAL_UART_Receive(&huart3, &xx, 1, 5000);
 800048c:	4637      	mov	r7, r6
          break;
 800048e:	e775      	b.n	800037c <Firmware_Update+0x58>
          ex = write_data_to_flash_app(block, MAX_BLOCK_SIZE, (current_app_size <= MAX_BLOCK_SIZE) );
 8000490:	4607      	mov	r7, r0
 8000492:	e773      	b.n	800037c <Firmware_Update+0x58>
 8000494:	200000dc 	.word	0x200000dc
 8000498:	08002930 	.word	0x08002930
 800049c:	0800295c 	.word	0x0800295c
 80004a0:	20000094 	.word	0x20000094
 80004a4:	08002988 	.word	0x08002988
 80004a8:	080029a8 	.word	0x080029a8
 80004ac:	080029c0 	.word	0x080029c0
 80004b0:	080029f8 	.word	0x080029f8

080004b4 <__io_putchar>:
{
 80004b4:	b500      	push	{lr}
 80004b6:	b083      	sub	sp, #12
 80004b8:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	2201      	movs	r2, #1
 80004c0:	a901      	add	r1, sp, #4
 80004c2:	4803      	ldr	r0, [pc, #12]	; (80004d0 <__io_putchar+0x1c>)
 80004c4:	f001 f8ab 	bl	800161e <HAL_UART_Transmit>
}
 80004c8:	9801      	ldr	r0, [sp, #4]
 80004ca:	b003      	add	sp, #12
 80004cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80004d0:	20000098 	.word	0x20000098

080004d4 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <Error_Handler+0x2>

080004d8 <MX_USART1_UART_Init>:
{
 80004d8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80004da:	480a      	ldr	r0, [pc, #40]	; (8000504 <MX_USART1_UART_Init+0x2c>)
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <MX_USART1_UART_Init+0x30>)
 80004de:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80004e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80004e4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	2300      	movs	r3, #0
 80004e8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004ea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ec:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004ee:	220c      	movs	r2, #12
 80004f0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004f6:	f001 f863 	bl	80015c0 <HAL_UART_Init>
 80004fa:	b900      	cbnz	r0, 80004fe <MX_USART1_UART_Init+0x26>
}
 80004fc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80004fe:	f7ff ffe9 	bl	80004d4 <Error_Handler>
 8000502:	bf00      	nop
 8000504:	20000098 	.word	0x20000098
 8000508:	40013800 	.word	0x40013800

0800050c <MX_USART3_UART_Init>:
{
 800050c:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 800050e:	480a      	ldr	r0, [pc, #40]	; (8000538 <MX_USART3_UART_Init+0x2c>)
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_USART3_UART_Init+0x30>)
 8000512:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000514:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000518:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	2300      	movs	r3, #0
 800051c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800051e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000520:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000522:	220c      	movs	r2, #12
 8000524:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000526:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800052a:	f001 f849 	bl	80015c0 <HAL_UART_Init>
 800052e:	b900      	cbnz	r0, 8000532 <MX_USART3_UART_Init+0x26>
}
 8000530:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000532:	f7ff ffcf 	bl	80004d4 <Error_Handler>
 8000536:	bf00      	nop
 8000538:	200000dc 	.word	0x200000dc
 800053c:	40004800 	.word	0x40004800

08000540 <SystemClock_Config>:
{
 8000540:	b500      	push	{lr}
 8000542:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000544:	2228      	movs	r2, #40	; 0x28
 8000546:	2100      	movs	r1, #0
 8000548:	a806      	add	r0, sp, #24
 800054a:	f001 f971 	bl	8001830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054e:	2300      	movs	r3, #0
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	9302      	str	r3, [sp, #8]
 8000554:	9303      	str	r3, [sp, #12]
 8000556:	9304      	str	r3, [sp, #16]
 8000558:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2310      	movs	r3, #16
 8000564:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	a806      	add	r0, sp, #24
 8000568:	f000 fc8e 	bl	8000e88 <HAL_RCC_OscConfig>
 800056c:	b968      	cbnz	r0, 800058a <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000572:	2100      	movs	r1, #0
 8000574:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000578:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057c:	a801      	add	r0, sp, #4
 800057e:	f000 fec3 	bl	8001308 <HAL_RCC_ClockConfig>
 8000582:	b920      	cbnz	r0, 800058e <SystemClock_Config+0x4e>
}
 8000584:	b011      	add	sp, #68	; 0x44
 8000586:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800058a:	f7ff ffa3 	bl	80004d4 <Error_Handler>
    Error_Handler();
 800058e:	f7ff ffa1 	bl	80004d4 <Error_Handler>
	...

08000594 <main>:
{
 8000594:	b508      	push	{r3, lr}
  HAL_Init();
 8000596:	f000 f945 	bl	8000824 <HAL_Init>
  SystemClock_Config();
 800059a:	f7ff ffd1 	bl	8000540 <SystemClock_Config>
  MX_GPIO_Init();
 800059e:	f7ff fdd5 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a2:	f7ff ff99 	bl	80004d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005a6:	f7ff ffb1 	bl	800050c <MX_USART3_UART_Init>
  printf("Bootloader v%d:%d Started!!!\n", BL_Version[0], BL_Version[1]);
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <main+0x2c>)
 80005ac:	785a      	ldrb	r2, [r3, #1]
 80005ae:	7819      	ldrb	r1, [r3, #0]
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <main+0x30>)
 80005b2:	f001 f945 	bl	8001840 <iprintf>
  Firmware_Update();
 80005b6:	f7ff feb5 	bl	8000324 <Firmware_Update>
  goto_application();
 80005ba:	f7ff fe03 	bl	80001c4 <goto_application>
  while (1)
 80005be:	e7fe      	b.n	80005be <main+0x2a>
 80005c0:	20000000 	.word	0x20000000
 80005c4:	08002a30 	.word	0x08002a30

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <HAL_MspInit+0x2c>)
 80005cc:	699a      	ldr	r2, [r3, #24]
 80005ce:	f042 0201 	orr.w	r2, r2, #1
 80005d2:	619a      	str	r2, [r3, #24]
 80005d4:	699a      	ldr	r2, [r3, #24]
 80005d6:	f002 0201 	and.w	r2, r2, #1
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	69da      	ldr	r2, [r3, #28]
 80005e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005e4:	61da      	str	r2, [r3, #28]
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f0:	b002      	add	sp, #8
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005f8:	b510      	push	{r4, lr}
 80005fa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	2300      	movs	r3, #0
 80005fe:	9304      	str	r3, [sp, #16]
 8000600:	9305      	str	r3, [sp, #20]
 8000602:	9306      	str	r3, [sp, #24]
 8000604:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000606:	6803      	ldr	r3, [r0, #0]
 8000608:	4a2d      	ldr	r2, [pc, #180]	; (80006c0 <HAL_UART_MspInit+0xc8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d004      	beq.n	8000618 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800060e:	4a2d      	ldr	r2, [pc, #180]	; (80006c4 <HAL_UART_MspInit+0xcc>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d02b      	beq.n	800066c <HAL_UART_MspInit+0x74>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000614:	b008      	add	sp, #32
 8000616:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000618:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <HAL_UART_MspInit+0xd0>)
 800061a:	699a      	ldr	r2, [r3, #24]
 800061c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000620:	619a      	str	r2, [r3, #24]
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	699a      	ldr	r2, [r3, #24]
 800062e:	f042 0204 	orr.w	r2, r2, #4
 8000632:	619a      	str	r2, [r3, #24]
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800063e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000642:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	4c1f      	ldr	r4, [pc, #124]	; (80006cc <HAL_UART_MspInit+0xd4>)
 800064e:	a904      	add	r1, sp, #16
 8000650:	4620      	mov	r0, r4
 8000652:	f000 fae1 	bl	8000c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	a904      	add	r1, sp, #16
 8000664:	4620      	mov	r0, r4
 8000666:	f000 fad7 	bl	8000c18 <HAL_GPIO_Init>
 800066a:	e7d3      	b.n	8000614 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_UART_MspInit+0xd0>)
 800066e:	69da      	ldr	r2, [r3, #28]
 8000670:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000674:	61da      	str	r2, [r3, #28]
 8000676:	69da      	ldr	r2, [r3, #28]
 8000678:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800067c:	9202      	str	r2, [sp, #8]
 800067e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	699a      	ldr	r2, [r3, #24]
 8000682:	f042 0208 	orr.w	r2, r2, #8
 8000686:	619a      	str	r2, [r3, #24]
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 0308 	and.w	r3, r3, #8
 800068e:	9303      	str	r3, [sp, #12]
 8000690:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000696:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	4c0b      	ldr	r4, [pc, #44]	; (80006d0 <HAL_UART_MspInit+0xd8>)
 80006a2:	a904      	add	r1, sp, #16
 80006a4:	4620      	mov	r0, r4
 80006a6:	f000 fab7 	bl	8000c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	a904      	add	r1, sp, #16
 80006b8:	4620      	mov	r0, r4
 80006ba:	f000 faad 	bl	8000c18 <HAL_GPIO_Init>
}
 80006be:	e7a9      	b.n	8000614 <HAL_UART_MspInit+0x1c>
 80006c0:	40013800 	.word	0x40013800
 80006c4:	40004800 	.word	0x40004800
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40010c00 	.word	0x40010c00

080006d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler>

080006d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler>

080006d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler>

080006da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <BusFault_Handler>

080006dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler>

080006de <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e0:	4770      	bx	lr

080006e2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e2:	4770      	bx	lr

080006e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e6:	f000 f8af 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ea:	bd08      	pop	{r3, pc}

080006ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	460c      	mov	r4, r1
 80006f0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f2:	2500      	movs	r5, #0
 80006f4:	e006      	b.n	8000704 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80006f6:	f3af 8000 	nop.w
 80006fa:	4621      	mov	r1, r4
 80006fc:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000700:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8000702:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000704:	42b5      	cmp	r5, r6
 8000706:	dbf6      	blt.n	80006f6 <_read+0xa>
	}

return len;
}
 8000708:	4630      	mov	r0, r6
 800070a:	bd70      	pop	{r4, r5, r6, pc}

0800070c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800070c:	b570      	push	{r4, r5, r6, lr}
 800070e:	460c      	mov	r4, r1
 8000710:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000712:	2500      	movs	r5, #0
 8000714:	e004      	b.n	8000720 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8000716:	f814 0b01 	ldrb.w	r0, [r4], #1
 800071a:	f7ff fecb 	bl	80004b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071e:	3501      	adds	r5, #1
 8000720:	42b5      	cmp	r5, r6
 8000722:	dbf8      	blt.n	8000716 <_write+0xa>
	}
	return len;
}
 8000724:	4630      	mov	r0, r6
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <_close>:

int _close(int file)
{
	return -1;
}
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	4770      	bx	lr

0800072e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000734:	2000      	movs	r0, #0
 8000736:	4770      	bx	lr

08000738 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000738:	2001      	movs	r0, #1
 800073a:	4770      	bx	lr

0800073c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800073c:	2000      	movs	r0, #0
 800073e:	4770      	bx	lr

08000740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000740:	b510      	push	{r4, lr}
 8000742:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <_sbrk+0x38>)
 8000746:	490d      	ldr	r1, [pc, #52]	; (800077c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <_sbrk+0x40>)
 800074a:	6800      	ldr	r0, [r0, #0]
 800074c:	b140      	cbz	r0, 8000760 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074e:	480c      	ldr	r0, [pc, #48]	; (8000780 <_sbrk+0x40>)
 8000750:	6800      	ldr	r0, [r0, #0]
 8000752:	4403      	add	r3, r0
 8000754:	1a52      	subs	r2, r2, r1
 8000756:	4293      	cmp	r3, r2
 8000758:	d806      	bhi.n	8000768 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <_sbrk+0x40>)
 800075c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800075e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <_sbrk+0x40>)
 8000762:	4c08      	ldr	r4, [pc, #32]	; (8000784 <_sbrk+0x44>)
 8000764:	6004      	str	r4, [r0, #0]
 8000766:	e7f2      	b.n	800074e <_sbrk+0xe>
    errno = ENOMEM;
 8000768:	f001 f838 	bl	80017dc <__errno>
 800076c:	230c      	movs	r3, #12
 800076e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	e7f3      	b.n	800075e <_sbrk+0x1e>
 8000776:	bf00      	nop
 8000778:	20005000 	.word	0x20005000
 800077c:	00000400 	.word	0x00000400
 8000780:	20000120 	.word	0x20000120
 8000784:	20000158 	.word	0x20000158

08000788 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	4770      	bx	lr
	...

0800078c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800078e:	490d      	ldr	r1, [pc, #52]	; (80007c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007a4:	4c0a      	ldr	r4, [pc, #40]	; (80007d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007b2:	f7ff ffe9 	bl	8000788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007b6:	f001 f817 	bl	80017e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ba:	f7ff feeb 	bl	8000594 <main>
  bx lr
 80007be:	4770      	bx	lr
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007c8:	08002b1c 	.word	0x08002b1c
  ldr r2, =_sbss
 80007cc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80007d0:	20000158 	.word	0x20000158

080007d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC1_2_IRQHandler>
	...

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b510      	push	{r4, lr}
 80007da:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_InitTick+0x40>)
 80007de:	7818      	ldrb	r0, [r3, #0]
 80007e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <HAL_InitTick+0x44>)
 80007ea:	6810      	ldr	r0, [r2, #0]
 80007ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80007f0:	f000 f89a 	bl	8000928 <HAL_SYSTICK_Config>
 80007f4:	b968      	cbnz	r0, 8000812 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	2c0f      	cmp	r4, #15
 80007f8:	d901      	bls.n	80007fe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80007fa:	2001      	movs	r0, #1
 80007fc:	e00a      	b.n	8000814 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fe:	2200      	movs	r2, #0
 8000800:	4621      	mov	r1, r4
 8000802:	f04f 30ff 	mov.w	r0, #4294967295
 8000806:	f000 f857 	bl	80008b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_InitTick+0x48>)
 800080c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2000      	movs	r0, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000812:	2001      	movs	r0, #1
}
 8000814:	bd10      	pop	{r4, pc}
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	20000004 	.word	0x20000004
 8000820:	2000000c 	.word	0x2000000c

08000824 <HAL_Init>:
{
 8000824:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000826:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x20>)
 8000828:	6813      	ldr	r3, [r2, #0]
 800082a:	f043 0310 	orr.w	r3, r3, #16
 800082e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 f82f 	bl	8000894 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000836:	200f      	movs	r0, #15
 8000838:	f7ff ffce 	bl	80007d8 <HAL_InitTick>
  HAL_MspInit();
 800083c:	f7ff fec4 	bl	80005c8 <HAL_MspInit>
}
 8000840:	2000      	movs	r0, #0
 8000842:	bd08      	pop	{r3, pc}
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000848:	4a03      	ldr	r2, [pc, #12]	; (8000858 <HAL_IncTick+0x10>)
 800084a:	6811      	ldr	r1, [r2, #0]
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <HAL_IncTick+0x14>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	440b      	add	r3, r1
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000124 	.word	0x20000124
 800085c:	20000008 	.word	0x20000008

08000860 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000860:	4b01      	ldr	r3, [pc, #4]	; (8000868 <HAL_GetTick+0x8>)
 8000862:	6818      	ldr	r0, [r3, #0]
}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000124 	.word	0x20000124

0800086c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800086c:	b538      	push	{r3, r4, r5, lr}
 800086e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff fff6 	bl	8000860 <HAL_GetTick>
 8000874:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000876:	f1b4 3fff 	cmp.w	r4, #4294967295
 800087a:	d002      	beq.n	8000882 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <HAL_Delay+0x24>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000882:	f7ff ffed 	bl	8000860 <HAL_GetTick>
 8000886:	1b40      	subs	r0, r0, r5
 8000888:	42a0      	cmp	r0, r4
 800088a:	d3fa      	bcc.n	8000882 <HAL_Delay+0x16>
  {
  }
}
 800088c:	bd38      	pop	{r3, r4, r5, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008

08000894 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000896:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000898:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800089c:	041b      	lsls	r3, r3, #16
 800089e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a0:	0200      	lsls	r0, r0, #8
 80008a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80008b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <HAL_NVIC_SetPriority+0x68>)
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c2:	f1c3 0c07 	rsb	ip, r3, #7
 80008c6:	f1bc 0f04 	cmp.w	ip, #4
 80008ca:	bf28      	it	cs
 80008cc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d0:	f103 0e04 	add.w	lr, r3, #4
 80008d4:	f1be 0f06 	cmp.w	lr, #6
 80008d8:	d918      	bls.n	800090c <HAL_NVIC_SetPriority+0x54>
 80008da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	f04f 3eff 	mov.w	lr, #4294967295
 80008e0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80008e4:	ea21 010c 	bic.w	r1, r1, ip
 80008e8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ea:	fa0e f303 	lsl.w	r3, lr, r3
 80008ee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80008f4:	2800      	cmp	r0, #0
 80008f6:	db0b      	blt.n	8000910 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	0109      	lsls	r1, r1, #4
 80008fa:	b2c9      	uxtb	r1, r1
 80008fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000900:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000904:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000908:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090c:	2300      	movs	r3, #0
 800090e:	e7e5      	b.n	80008dc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	f000 000f 	and.w	r0, r0, #15
 8000914:	0109      	lsls	r1, r1, #4
 8000916:	b2c9      	uxtb	r1, r1
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <HAL_NVIC_SetPriority+0x6c>)
 800091a:	5419      	strb	r1, [r3, r0]
 800091c:	e7f4      	b.n	8000908 <HAL_NVIC_SetPriority+0x50>
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00
 8000924:	e000ed14 	.word	0xe000ed14

08000928 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000928:	3801      	subs	r0, #1
 800092a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800092e:	d20b      	bcs.n	8000948 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000930:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000934:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <HAL_SYSTICK_Config+0x24>)
 8000938:	21f0      	movs	r1, #240	; 0xf0
 800093a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800093e:	2000      	movs	r0, #0
 8000940:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000942:	2207      	movs	r2, #7
 8000944:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000946:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000948:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <FLASH_Program_HalfWord+0x14>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <FLASH_Program_HalfWord+0x18>)
 8000958:	6913      	ldr	r3, [r2, #16]
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000960:	8001      	strh	r1, [r0, #0]
}
 8000962:	4770      	bx	lr
 8000964:	20000128 	.word	0x20000128
 8000968:	40022000 	.word	0x40022000

0800096c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <FLASH_SetErrorCode+0x68>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	f013 0310 	ands.w	r3, r3, #16
 8000974:	d005      	beq.n	8000982 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <FLASH_SetErrorCode+0x6c>)
 8000978:	69d3      	ldr	r3, [r2, #28]
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000980:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000982:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <FLASH_SetErrorCode+0x68>)
 8000984:	68d2      	ldr	r2, [r2, #12]
 8000986:	f012 0f04 	tst.w	r2, #4
 800098a:	d006      	beq.n	800099a <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800098c:	4912      	ldr	r1, [pc, #72]	; (80009d8 <FLASH_SetErrorCode+0x6c>)
 800098e:	69ca      	ldr	r2, [r1, #28]
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000996:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <FLASH_SetErrorCode+0x68>)
 800099c:	69d2      	ldr	r2, [r2, #28]
 800099e:	f012 0f01 	tst.w	r2, #1
 80009a2:	d009      	beq.n	80009b8 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <FLASH_SetErrorCode+0x6c>)
 80009a6:	69ca      	ldr	r2, [r1, #28]
 80009a8:	f042 0204 	orr.w	r2, r2, #4
 80009ac:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80009ae:	4909      	ldr	r1, [pc, #36]	; (80009d4 <FLASH_SetErrorCode+0x68>)
 80009b0:	69ca      	ldr	r2, [r1, #28]
 80009b2:	f022 0201 	bic.w	r2, r2, #1
 80009b6:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009b8:	f240 1201 	movw	r2, #257	; 0x101
 80009bc:	4293      	cmp	r3, r2
 80009be:	d002      	beq.n	80009c6 <FLASH_SetErrorCode+0x5a>
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <FLASH_SetErrorCode+0x68>)
 80009c2:	60d3      	str	r3, [r2, #12]
}  
 80009c4:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009c6:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <FLASH_SetErrorCode+0x68>)
 80009c8:	69d3      	ldr	r3, [r2, #28]
 80009ca:	f023 0301 	bic.w	r3, r3, #1
 80009ce:	61d3      	str	r3, [r2, #28]
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40022000 	.word	0x40022000
 80009d8:	20000128 	.word	0x20000128

080009dc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <HAL_FLASH_Unlock+0x2c>)
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80009e4:	d00b      	beq.n	80009fe <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_FLASH_Unlock+0x2c>)
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_FLASH_Unlock+0x30>)
 80009ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80009ec:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80009f0:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80009f8:	d103      	bne.n	8000a02 <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 80009fa:	2000      	movs	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	2000      	movs	r0, #0
 8000a00:	4770      	bx	lr
      status = HAL_ERROR;
 8000a02:	2001      	movs	r0, #1
}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40022000 	.word	0x40022000
 8000a0c:	45670123 	.word	0x45670123

08000a10 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a10:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <HAL_FLASH_Lock+0x10>)
 8000a12:	6913      	ldr	r3, [r2, #16]
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	6113      	str	r3, [r2, #16]
}
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40022000 	.word	0x40022000

08000a24 <FLASH_WaitForLastOperation>:
{
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a28:	f7ff ff1a 	bl	8000860 <HAL_GetTick>
 8000a2c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <FLASH_WaitForLastOperation+0x64>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	f013 0f01 	tst.w	r3, #1
 8000a36:	d00a      	beq.n	8000a4e <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8000a38:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a3c:	d0f7      	beq.n	8000a2e <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000a3e:	b124      	cbz	r4, 8000a4a <FLASH_WaitForLastOperation+0x26>
 8000a40:	f7ff ff0e 	bl	8000860 <HAL_GetTick>
 8000a44:	1b40      	subs	r0, r0, r5
 8000a46:	42a0      	cmp	r0, r4
 8000a48:	d9f1      	bls.n	8000a2e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000a4a:	2003      	movs	r0, #3
 8000a4c:	e01b      	b.n	8000a86 <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <FLASH_WaitForLastOperation+0x64>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	f013 0f20 	tst.w	r3, #32
 8000a56:	d002      	beq.n	8000a5e <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <FLASH_WaitForLastOperation+0x64>)
 8000a5a:	2220      	movs	r2, #32
 8000a5c:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <FLASH_WaitForLastOperation+0x64>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	f013 0f10 	tst.w	r3, #16
 8000a66:	d10b      	bne.n	8000a80 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <FLASH_WaitForLastOperation+0x64>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a6c:	f013 0f01 	tst.w	r3, #1
 8000a70:	d106      	bne.n	8000a80 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <FLASH_WaitForLastOperation+0x64>)
 8000a74:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000a76:	f013 0f04 	tst.w	r3, #4
 8000a7a:	d101      	bne.n	8000a80 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	e002      	b.n	8000a86 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8000a80:	f7ff ff74 	bl	800096c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000a84:	2001      	movs	r0, #1
}
 8000a86:	bd38      	pop	{r3, r4, r5, pc}
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_FLASH_Program>:
{
 8000a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a90:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <HAL_FLASH_Program+0x98>)
 8000a94:	7e1b      	ldrb	r3, [r3, #24]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d041      	beq.n	8000b1e <HAL_FLASH_Program+0x92>
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	460f      	mov	r7, r1
 8000a9e:	4690      	mov	r8, r2
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_FLASH_Program+0x98>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000aa6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000aaa:	f7ff ffbb 	bl	8000a24 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000aae:	4603      	mov	r3, r0
 8000ab0:	bb78      	cbnz	r0, 8000b12 <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ab2:	2c01      	cmp	r4, #1
 8000ab4:	d008      	beq.n	8000ac8 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ab6:	2c02      	cmp	r4, #2
 8000ab8:	d003      	beq.n	8000ac2 <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 8000aba:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8000abe:	461c      	mov	r4, r3
 8000ac0:	e007      	b.n	8000ad2 <HAL_FLASH_Program+0x46>
      nbiterations = 2U;
 8000ac2:	f04f 0902 	mov.w	r9, #2
 8000ac6:	e7fa      	b.n	8000abe <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8000ac8:	f04f 0901 	mov.w	r9, #1
 8000acc:	e7f7      	b.n	8000abe <HAL_FLASH_Program+0x32>
    for (index = 0U; index < nbiterations; index++)
 8000ace:	3401      	adds	r4, #1
 8000ad0:	b2e4      	uxtb	r4, r4
 8000ad2:	454c      	cmp	r4, r9
 8000ad4:	d21d      	bcs.n	8000b12 <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000ad6:	0121      	lsls	r1, r4, #4
 8000ad8:	f1c1 0220 	rsb	r2, r1, #32
 8000adc:	f1a1 0320 	sub.w	r3, r1, #32
 8000ae0:	fa28 f101 	lsr.w	r1, r8, r1
 8000ae4:	fa06 f202 	lsl.w	r2, r6, r2
 8000ae8:	4311      	orrs	r1, r2
 8000aea:	fa26 f303 	lsr.w	r3, r6, r3
 8000aee:	4319      	orrs	r1, r3
 8000af0:	b289      	uxth	r1, r1
 8000af2:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8000af6:	f7ff ff2b 	bl	8000950 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000afa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000afe:	f7ff ff91 	bl	8000a24 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_FLASH_Program+0x9c>)
 8000b04:	691d      	ldr	r5, [r3, #16]
 8000b06:	f025 0501 	bic.w	r5, r5, #1
 8000b0a:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d0dd      	beq.n	8000ace <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_FLASH_Program+0x98>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	7611      	strb	r1, [r2, #24]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8000b1e:	2302      	movs	r3, #2
 8000b20:	e7fa      	b.n	8000b18 <HAL_FLASH_Program+0x8c>
 8000b22:	bf00      	nop
 8000b24:	20000128 	.word	0x20000128
 8000b28:	40022000 	.word	0x40022000

08000b2c <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <FLASH_MassErase+0x1c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <FLASH_MassErase+0x20>)
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	f042 0204 	orr.w	r2, r2, #4
 8000b3a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b42:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000128 	.word	0x20000128
 8000b4c:	40022000 	.word	0x40022000

08000b50 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <FLASH_PageErase+0x1c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <FLASH_PageErase+0x20>)
 8000b58:	691a      	ldr	r2, [r3, #16]
 8000b5a:	f042 0202 	orr.w	r2, r2, #2
 8000b5e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000b60:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b62:	691a      	ldr	r2, [r3, #16]
 8000b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b68:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000128 	.word	0x20000128
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <HAL_FLASHEx_Erase+0x9c>)
 8000b76:	7e1b      	ldrb	r3, [r3, #24]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d046      	beq.n	8000c0a <HAL_FLASHEx_Erase+0x96>
{
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	4605      	mov	r5, r0
 8000b80:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <HAL_FLASHEx_Erase+0x9c>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000b88:	6803      	ldr	r3, [r0, #0]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d020      	beq.n	8000bd0 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000b8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b92:	f7ff ff47 	bl	8000a24 <FLASH_WaitForLastOperation>
 8000b96:	bb90      	cbnz	r0, 8000bfe <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000b9e:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ba0:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ba2:	68ea      	ldr	r2, [r5, #12]
 8000ba4:	68ab      	ldr	r3, [r5, #8]
 8000ba6:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8000baa:	42a3      	cmp	r3, r4
 8000bac:	d928      	bls.n	8000c00 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f7ff ffce 	bl	8000b50 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bb8:	f7ff ff34 	bl	8000a24 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000bbc:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <HAL_FLASHEx_Erase+0xa0>)
 8000bbe:	6913      	ldr	r3, [r2, #16]
 8000bc0:	f023 0302 	bic.w	r3, r3, #2
 8000bc4:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	b9b8      	cbnz	r0, 8000bfa <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8000bca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bce:	e7e8      	b.n	8000ba2 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bd4:	f7ff ff26 	bl	8000a24 <FLASH_WaitForLastOperation>
 8000bd8:	b108      	cbz	r0, 8000bde <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bda:	2101      	movs	r1, #1
 8000bdc:	e010      	b.n	8000c00 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f7ff ffa4 	bl	8000b2c <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000be4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000be8:	f7ff ff1c 	bl	8000a24 <FLASH_WaitForLastOperation>
 8000bec:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <HAL_FLASHEx_Erase+0xa0>)
 8000bf0:	6913      	ldr	r3, [r2, #16]
 8000bf2:	f023 0304 	bic.w	r3, r3, #4
 8000bf6:	6113      	str	r3, [r2, #16]
 8000bf8:	e002      	b.n	8000c00 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8000bfa:	6034      	str	r4, [r6, #0]
            break;
 8000bfc:	e000      	b.n	8000c00 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bfe:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_FLASHEx_Erase+0x9c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	761a      	strb	r2, [r3, #24]
}
 8000c06:	4608      	mov	r0, r1
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8000c0a:	2102      	movs	r1, #2
}
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4770      	bx	lr
 8000c10:	20000128 	.word	0x20000128
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c1c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000c1e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c20:	e0a6      	b.n	8000d70 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c22:	4d80      	ldr	r5, [pc, #512]	; (8000e24 <HAL_GPIO_Init+0x20c>)
 8000c24:	42aa      	cmp	r2, r5
 8000c26:	d010      	beq.n	8000c4a <HAL_GPIO_Init+0x32>
 8000c28:	d907      	bls.n	8000c3a <HAL_GPIO_Init+0x22>
 8000c2a:	4d7f      	ldr	r5, [pc, #508]	; (8000e28 <HAL_GPIO_Init+0x210>)
 8000c2c:	42aa      	cmp	r2, r5
 8000c2e:	d00c      	beq.n	8000c4a <HAL_GPIO_Init+0x32>
 8000c30:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8000c34:	42aa      	cmp	r2, r5
 8000c36:	d008      	beq.n	8000c4a <HAL_GPIO_Init+0x32>
 8000c38:	e013      	b.n	8000c62 <HAL_GPIO_Init+0x4a>
 8000c3a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000c3e:	42aa      	cmp	r2, r5
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x32>
 8000c42:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8000c46:	42aa      	cmp	r2, r5
 8000c48:	d107      	bne.n	8000c5a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4a:	688a      	ldr	r2, [r1, #8]
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d058      	beq.n	8000d02 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c50:	2a01      	cmp	r2, #1
 8000c52:	d051      	beq.n	8000cf8 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000c54:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c56:	2408      	movs	r4, #8
 8000c58:	e003      	b.n	8000c62 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000c5a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000c5e:	42aa      	cmp	r2, r5
 8000c60:	d0f3      	beq.n	8000c4a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c62:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000c66:	d84e      	bhi.n	8000d06 <HAL_GPIO_Init+0xee>
 8000c68:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c6a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000c6e:	d84c      	bhi.n	8000d0a <HAL_GPIO_Init+0xf2>
 8000c70:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c74:	6833      	ldr	r3, [r6, #0]
 8000c76:	250f      	movs	r5, #15
 8000c78:	4095      	lsls	r5, r2
 8000c7a:	ea23 0305 	bic.w	r3, r3, r5
 8000c7e:	fa04 f202 	lsl.w	r2, r4, r2
 8000c82:	4313      	orrs	r3, r2
 8000c84:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c86:	684b      	ldr	r3, [r1, #4]
 8000c88:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000c8c:	d06e      	beq.n	8000d6c <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8e:	4b67      	ldr	r3, [pc, #412]	; (8000e2c <HAL_GPIO_Init+0x214>)
 8000c90:	699a      	ldr	r2, [r3, #24]
 8000c92:	f042 0201 	orr.w	r2, r2, #1
 8000c96:	619a      	str	r2, [r3, #24]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca2:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000ca6:	1c95      	adds	r5, r2, #2
 8000ca8:	4b61      	ldr	r3, [pc, #388]	; (8000e30 <HAL_GPIO_Init+0x218>)
 8000caa:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cae:	f00c 0303 	and.w	r3, ip, #3
 8000cb2:	009d      	lsls	r5, r3, #2
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	40ab      	lsls	r3, r5
 8000cb8:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cbc:	4b5d      	ldr	r3, [pc, #372]	; (8000e34 <HAL_GPIO_Init+0x21c>)
 8000cbe:	4298      	cmp	r0, r3
 8000cc0:	d029      	beq.n	8000d16 <HAL_GPIO_Init+0xfe>
 8000cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	f000 808e 	beq.w	8000de8 <HAL_GPIO_Init+0x1d0>
 8000ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cd0:	4298      	cmp	r0, r3
 8000cd2:	f000 808b 	beq.w	8000dec <HAL_GPIO_Init+0x1d4>
 8000cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d019      	beq.n	8000d12 <HAL_GPIO_Init+0xfa>
 8000cde:	2304      	movs	r3, #4
 8000ce0:	e01a      	b.n	8000d18 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ce2:	68cc      	ldr	r4, [r1, #12]
          break;
 8000ce4:	e7bd      	b.n	8000c62 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce6:	68cc      	ldr	r4, [r1, #12]
 8000ce8:	3404      	adds	r4, #4
          break;
 8000cea:	e7ba      	b.n	8000c62 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cec:	68cc      	ldr	r4, [r1, #12]
 8000cee:	3408      	adds	r4, #8
          break;
 8000cf0:	e7b7      	b.n	8000c62 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf2:	68cc      	ldr	r4, [r1, #12]
 8000cf4:	340c      	adds	r4, #12
          break;
 8000cf6:	e7b4      	b.n	8000c62 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000cf8:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cfa:	2408      	movs	r4, #8
 8000cfc:	e7b1      	b.n	8000c62 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cfe:	2400      	movs	r4, #0
 8000d00:	e7af      	b.n	8000c62 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d02:	2404      	movs	r4, #4
 8000d04:	e7ad      	b.n	8000c62 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d06:	1d06      	adds	r6, r0, #4
 8000d08:	e7af      	b.n	8000c6a <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d0a:	f1ac 0208 	sub.w	r2, ip, #8
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	e7b0      	b.n	8000c74 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d12:	2303      	movs	r3, #3
 8000d14:	e000      	b.n	8000d18 <HAL_GPIO_Init+0x100>
 8000d16:	2300      	movs	r3, #0
 8000d18:	40ab      	lsls	r3, r5
 8000d1a:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000d1c:	3202      	adds	r2, #2
 8000d1e:	4d44      	ldr	r5, [pc, #272]	; (8000e30 <HAL_GPIO_Init+0x218>)
 8000d20:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d24:	684b      	ldr	r3, [r1, #4]
 8000d26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d2a:	d061      	beq.n	8000df0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2c:	4a42      	ldr	r2, [pc, #264]	; (8000e38 <HAL_GPIO_Init+0x220>)
 8000d2e:	6813      	ldr	r3, [r2, #0]
 8000d30:	ea43 030e 	orr.w	r3, r3, lr
 8000d34:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d36:	684b      	ldr	r3, [r1, #4]
 8000d38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d3c:	d05e      	beq.n	8000dfc <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d3e:	4a3e      	ldr	r2, [pc, #248]	; (8000e38 <HAL_GPIO_Init+0x220>)
 8000d40:	6853      	ldr	r3, [r2, #4]
 8000d42:	ea43 030e 	orr.w	r3, r3, lr
 8000d46:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d48:	684b      	ldr	r3, [r1, #4]
 8000d4a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000d4e:	d05b      	beq.n	8000e08 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d50:	4a39      	ldr	r2, [pc, #228]	; (8000e38 <HAL_GPIO_Init+0x220>)
 8000d52:	6893      	ldr	r3, [r2, #8]
 8000d54:	ea43 030e 	orr.w	r3, r3, lr
 8000d58:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d5a:	684b      	ldr	r3, [r1, #4]
 8000d5c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000d60:	d058      	beq.n	8000e14 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d62:	4a35      	ldr	r2, [pc, #212]	; (8000e38 <HAL_GPIO_Init+0x220>)
 8000d64:	68d3      	ldr	r3, [r2, #12]
 8000d66:	ea43 030e 	orr.w	r3, r3, lr
 8000d6a:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000d6c:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d70:	680a      	ldr	r2, [r1, #0]
 8000d72:	fa32 f30c 	lsrs.w	r3, r2, ip
 8000d76:	d053      	beq.n	8000e20 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8000d78:	2301      	movs	r3, #1
 8000d7a:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8000d82:	ea33 0202 	bics.w	r2, r3, r2
 8000d86:	d1f1      	bne.n	8000d6c <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8000d88:	684a      	ldr	r2, [r1, #4]
 8000d8a:	2a12      	cmp	r2, #18
 8000d8c:	f63f af49 	bhi.w	8000c22 <HAL_GPIO_Init+0xa>
 8000d90:	2a12      	cmp	r2, #18
 8000d92:	f63f af66 	bhi.w	8000c62 <HAL_GPIO_Init+0x4a>
 8000d96:	a501      	add	r5, pc, #4	; (adr r5, 8000d9c <HAL_GPIO_Init+0x184>)
 8000d98:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8000d9c:	08000c4b 	.word	0x08000c4b
 8000da0:	08000ce3 	.word	0x08000ce3
 8000da4:	08000ced 	.word	0x08000ced
 8000da8:	08000cff 	.word	0x08000cff
 8000dac:	08000c63 	.word	0x08000c63
 8000db0:	08000c63 	.word	0x08000c63
 8000db4:	08000c63 	.word	0x08000c63
 8000db8:	08000c63 	.word	0x08000c63
 8000dbc:	08000c63 	.word	0x08000c63
 8000dc0:	08000c63 	.word	0x08000c63
 8000dc4:	08000c63 	.word	0x08000c63
 8000dc8:	08000c63 	.word	0x08000c63
 8000dcc:	08000c63 	.word	0x08000c63
 8000dd0:	08000c63 	.word	0x08000c63
 8000dd4:	08000c63 	.word	0x08000c63
 8000dd8:	08000c63 	.word	0x08000c63
 8000ddc:	08000c63 	.word	0x08000c63
 8000de0:	08000ce7 	.word	0x08000ce7
 8000de4:	08000cf3 	.word	0x08000cf3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000de8:	2301      	movs	r3, #1
 8000dea:	e795      	b.n	8000d18 <HAL_GPIO_Init+0x100>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e793      	b.n	8000d18 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000df0:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <HAL_GPIO_Init+0x220>)
 8000df2:	6813      	ldr	r3, [r2, #0]
 8000df4:	ea23 030e 	bic.w	r3, r3, lr
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e79c      	b.n	8000d36 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_GPIO_Init+0x220>)
 8000dfe:	6853      	ldr	r3, [r2, #4]
 8000e00:	ea23 030e 	bic.w	r3, r3, lr
 8000e04:	6053      	str	r3, [r2, #4]
 8000e06:	e79f      	b.n	8000d48 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_GPIO_Init+0x220>)
 8000e0a:	6893      	ldr	r3, [r2, #8]
 8000e0c:	ea23 030e 	bic.w	r3, r3, lr
 8000e10:	6093      	str	r3, [r2, #8]
 8000e12:	e7a2      	b.n	8000d5a <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_GPIO_Init+0x220>)
 8000e16:	68d3      	ldr	r3, [r2, #12]
 8000e18:	ea23 030e 	bic.w	r3, r3, lr
 8000e1c:	60d3      	str	r3, [r2, #12]
 8000e1e:	e7a5      	b.n	8000d6c <HAL_GPIO_Init+0x154>
  }
}
 8000e20:	b002      	add	sp, #8
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
 8000e24:	10220000 	.word	0x10220000
 8000e28:	10310000 	.word	0x10310000
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40010800 	.word	0x40010800
 8000e38:	40010400 	.word	0x40010400

08000e3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e3c:	b10a      	cbz	r2, 8000e42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e3e:	6101      	str	r1, [r0, #16]
 8000e40:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e42:	0409      	lsls	r1, r1, #16
 8000e44:	6101      	str	r1, [r0, #16]
  }
}
 8000e46:	4770      	bx	lr

08000e48 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e48:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e4a:	ea01 0203 	and.w	r2, r1, r3
 8000e4e:	ea21 0103 	bic.w	r1, r1, r3
 8000e52:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e56:	6101      	str	r1, [r0, #16]
}
 8000e58:	4770      	bx	lr
	...

08000e5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000e5c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <RCC_Delay+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <RCC_Delay+0x28>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	0a5b      	lsrs	r3, r3, #9
 8000e6a:	fb00 f303 	mul.w	r3, r0, r3
 8000e6e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000e70:	bf00      	nop
  }
  while (Delay --);
 8000e72:	9b01      	ldr	r3, [sp, #4]
 8000e74:	1e5a      	subs	r2, r3, #1
 8000e76:	9201      	str	r2, [sp, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f9      	bne.n	8000e70 <RCC_Delay+0x14>
}
 8000e7c:	b002      	add	sp, #8
 8000e7e:	4770      	bx	lr
 8000e80:	20000004 	.word	0x20000004
 8000e84:	10624dd3 	.word	0x10624dd3

08000e88 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	f000 81f1 	beq.w	8001270 <HAL_RCC_OscConfig+0x3e8>
{
 8000e8e:	b570      	push	{r4, r5, r6, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e94:	6803      	ldr	r3, [r0, #0]
 8000e96:	f013 0f01 	tst.w	r3, #1
 8000e9a:	d02c      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e9c:	4b99      	ldr	r3, [pc, #612]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d01d      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea8:	4b96      	ldr	r3, [pc, #600]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d012      	beq.n	8000eda <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb4:	6863      	ldr	r3, [r4, #4]
 8000eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eba:	d041      	beq.n	8000f40 <HAL_RCC_OscConfig+0xb8>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d155      	bne.n	8000f6c <HAL_RCC_OscConfig+0xe4>
 8000ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ec4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e037      	b.n	8000f4a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eda:	4b8a      	ldr	r3, [pc, #552]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ee2:	d0e7      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	4b87      	ldr	r3, [pc, #540]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000eec:	d003      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x6e>
 8000eee:	6863      	ldr	r3, [r4, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 81bf 	beq.w	8001274 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	f013 0f02 	tst.w	r3, #2
 8000efc:	d075      	beq.n	8000fea <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000efe:	4b81      	ldr	r3, [pc, #516]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f013 0f0c 	tst.w	r3, #12
 8000f06:	d05f      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f08:	4b7e      	ldr	r3, [pc, #504]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d054      	beq.n	8000fbe <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f14:	6923      	ldr	r3, [r4, #16]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 808a 	beq.w	8001030 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8000f1c:	4b7a      	ldr	r3, [pc, #488]	; (8001108 <HAL_RCC_OscConfig+0x280>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f22:	f7ff fc9d 	bl	8000860 <HAL_GetTick>
 8000f26:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f28:	4b76      	ldr	r3, [pc, #472]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f013 0f02 	tst.w	r3, #2
 8000f30:	d175      	bne.n	800101e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f32:	f7ff fc95 	bl	8000860 <HAL_GetTick>
 8000f36:	1b40      	subs	r0, r0, r5
 8000f38:	2802      	cmp	r0, #2
 8000f3a:	d9f5      	bls.n	8000f28 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	e19e      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f40:	4a70      	ldr	r2, [pc, #448]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4a:	6863      	ldr	r3, [r4, #4]
 8000f4c:	b343      	cbz	r3, 8000fa0 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fc87 	bl	8000860 <HAL_GetTick>
 8000f52:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f54:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f5c:	d1cb      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fc7f 	bl	8000860 <HAL_GetTick>
 8000f62:	1b40      	subs	r0, r0, r5
 8000f64:	2864      	cmp	r0, #100	; 0x64
 8000f66:	d9f5      	bls.n	8000f54 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000f68:	2003      	movs	r0, #3
 8000f6a:	e188      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f70:	d009      	beq.n	8000f86 <HAL_RCC_OscConfig+0xfe>
 8000f72:	4b64      	ldr	r3, [pc, #400]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e7e1      	b.n	8000f4a <HAL_RCC_OscConfig+0xc2>
 8000f86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f8a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e7d4      	b.n	8000f4a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fc5e 	bl	8000860 <HAL_GetTick>
 8000fa4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	4b57      	ldr	r3, [pc, #348]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fae:	d0a2      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fc56 	bl	8000860 <HAL_GetTick>
 8000fb4:	1b40      	subs	r0, r0, r5
 8000fb6:	2864      	cmp	r0, #100	; 0x64
 8000fb8:	d9f5      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000fba:	2003      	movs	r0, #3
 8000fbc:	e15f      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fbe:	4b51      	ldr	r3, [pc, #324]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000fc6:	d1a5      	bne.n	8000f14 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc8:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f013 0f02 	tst.w	r3, #2
 8000fd0:	d003      	beq.n	8000fda <HAL_RCC_OscConfig+0x152>
 8000fd2:	6923      	ldr	r3, [r4, #16]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	f040 814f 	bne.w	8001278 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fda:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8000fdc:	6813      	ldr	r3, [r2, #0]
 8000fde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fe2:	6961      	ldr	r1, [r4, #20]
 8000fe4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fe8:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	f013 0f08 	tst.w	r3, #8
 8000ff0:	d033      	beq.n	800105a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff2:	69a3      	ldr	r3, [r4, #24]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d05c      	beq.n	80010b2 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8000ff8:	4b43      	ldr	r3, [pc, #268]	; (8001108 <HAL_RCC_OscConfig+0x280>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001000:	f7ff fc2e 	bl	8000860 <HAL_GetTick>
 8001004:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	f013 0f02 	tst.w	r3, #2
 800100e:	d121      	bne.n	8001054 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001010:	f7ff fc26 	bl	8000860 <HAL_GetTick>
 8001014:	1b40      	subs	r0, r0, r5
 8001016:	2802      	cmp	r0, #2
 8001018:	d9f5      	bls.n	8001006 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800101a:	2003      	movs	r0, #3
 800101c:	e12f      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101e:	4a39      	ldr	r2, [pc, #228]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8001020:	6813      	ldr	r3, [r2, #0]
 8001022:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001026:	6961      	ldr	r1, [r4, #20]
 8001028:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e7dc      	b.n	8000fea <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_RCC_OscConfig+0x280>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001036:	f7ff fc13 	bl	8000860 <HAL_GetTick>
 800103a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103c:	4b31      	ldr	r3, [pc, #196]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f013 0f02 	tst.w	r3, #2
 8001044:	d0d1      	beq.n	8000fea <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fc0b 	bl	8000860 <HAL_GetTick>
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	2802      	cmp	r0, #2
 800104e:	d9f5      	bls.n	800103c <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001050:	2003      	movs	r0, #3
 8001052:	e114      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f7ff ff01 	bl	8000e5c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	f013 0f04 	tst.w	r3, #4
 8001060:	f000 8096 	beq.w	8001190 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800106c:	d134      	bne.n	80010d8 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 8001070:	69da      	ldr	r2, [r3, #28]
 8001072:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001076:	61da      	str	r2, [r3, #28]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001082:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <HAL_RCC_OscConfig+0x284>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f413 7f80 	tst.w	r3, #256	; 0x100
 800108c:	d026      	beq.n	80010dc <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108e:	68e3      	ldr	r3, [r4, #12]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d03d      	beq.n	8001110 <HAL_RCC_OscConfig+0x288>
 8001094:	2b00      	cmp	r3, #0
 8001096:	d153      	bne.n	8001140 <HAL_RCC_OscConfig+0x2b8>
 8001098:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800109c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80010a0:	6a1a      	ldr	r2, [r3, #32]
 80010a2:	f022 0201 	bic.w	r2, r2, #1
 80010a6:	621a      	str	r2, [r3, #32]
 80010a8:	6a1a      	ldr	r2, [r3, #32]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	621a      	str	r2, [r3, #32]
 80010b0:	e033      	b.n	800111a <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_RCC_OscConfig+0x280>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80010ba:	f7ff fbd1 	bl	8000860 <HAL_GetTick>
 80010be:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_RCC_OscConfig+0x27c>)
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	f013 0f02 	tst.w	r3, #2
 80010c8:	d0c7      	beq.n	800105a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ca:	f7ff fbc9 	bl	8000860 <HAL_GetTick>
 80010ce:	1b40      	subs	r0, r0, r5
 80010d0:	2802      	cmp	r0, #2
 80010d2:	d9f5      	bls.n	80010c0 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80010d4:	2003      	movs	r0, #3
 80010d6:	e0d2      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80010d8:	2500      	movs	r5, #0
 80010da:	e7d3      	b.n	8001084 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <HAL_RCC_OscConfig+0x284>)
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80010e6:	f7ff fbbb 	bl	8000860 <HAL_GetTick>
 80010ea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <HAL_RCC_OscConfig+0x284>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010f4:	d1cb      	bne.n	800108e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f6:	f7ff fbb3 	bl	8000860 <HAL_GetTick>
 80010fa:	1b80      	subs	r0, r0, r6
 80010fc:	2864      	cmp	r0, #100	; 0x64
 80010fe:	d9f5      	bls.n	80010ec <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8001100:	2003      	movs	r0, #3
 8001102:	e0bc      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
 8001104:	40021000 	.word	0x40021000
 8001108:	42420000 	.word	0x42420000
 800110c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001110:	4a5f      	ldr	r2, [pc, #380]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 8001112:	6a13      	ldr	r3, [r2, #32]
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800111a:	68e3      	ldr	r3, [r4, #12]
 800111c:	b333      	cbz	r3, 800116c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800111e:	f7ff fb9f 	bl	8000860 <HAL_GetTick>
 8001122:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001124:	4b5a      	ldr	r3, [pc, #360]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f013 0f02 	tst.w	r3, #2
 800112c:	d12f      	bne.n	800118e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112e:	f7ff fb97 	bl	8000860 <HAL_GetTick>
 8001132:	1b80      	subs	r0, r0, r6
 8001134:	f241 3388 	movw	r3, #5000	; 0x1388
 8001138:	4298      	cmp	r0, r3
 800113a:	d9f3      	bls.n	8001124 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 800113c:	2003      	movs	r0, #3
 800113e:	e09e      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001140:	2b05      	cmp	r3, #5
 8001142:	d009      	beq.n	8001158 <HAL_RCC_OscConfig+0x2d0>
 8001144:	4b52      	ldr	r3, [pc, #328]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 8001146:	6a1a      	ldr	r2, [r3, #32]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	621a      	str	r2, [r3, #32]
 800114e:	6a1a      	ldr	r2, [r3, #32]
 8001150:	f022 0204 	bic.w	r2, r2, #4
 8001154:	621a      	str	r2, [r3, #32]
 8001156:	e7e0      	b.n	800111a <HAL_RCC_OscConfig+0x292>
 8001158:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	f042 0204 	orr.w	r2, r2, #4
 8001160:	621a      	str	r2, [r3, #32]
 8001162:	6a1a      	ldr	r2, [r3, #32]
 8001164:	f042 0201 	orr.w	r2, r2, #1
 8001168:	621a      	str	r2, [r3, #32]
 800116a:	e7d6      	b.n	800111a <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 800116c:	f7ff fb78 	bl	8000860 <HAL_GetTick>
 8001170:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	f013 0f02 	tst.w	r3, #2
 800117a:	d008      	beq.n	800118e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117c:	f7ff fb70 	bl	8000860 <HAL_GetTick>
 8001180:	1b80      	subs	r0, r0, r6
 8001182:	f241 3388 	movw	r3, #5000	; 0x1388
 8001186:	4298      	cmp	r0, r3
 8001188:	d9f3      	bls.n	8001172 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800118a:	2003      	movs	r0, #3
 800118c:	e077      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800118e:	b9e5      	cbnz	r5, 80011ca <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001190:	69e3      	ldr	r3, [r4, #28]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d072      	beq.n	800127c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001196:	4a3e      	ldr	r2, [pc, #248]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 8001198:	6852      	ldr	r2, [r2, #4]
 800119a:	f002 020c 	and.w	r2, r2, #12
 800119e:	2a08      	cmp	r2, #8
 80011a0:	d056      	beq.n	8001250 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d017      	beq.n	80011d6 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_RCC_OscConfig+0x40c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80011ac:	f7ff fb58 	bl	8000860 <HAL_GetTick>
 80011b0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011ba:	d047      	beq.n	800124c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011bc:	f7ff fb50 	bl	8000860 <HAL_GetTick>
 80011c0:	1b00      	subs	r0, r0, r4
 80011c2:	2802      	cmp	r0, #2
 80011c4:	d9f5      	bls.n	80011b2 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80011c6:	2003      	movs	r0, #3
 80011c8:	e059      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ca:	4a31      	ldr	r2, [pc, #196]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 80011cc:	69d3      	ldr	r3, [r2, #28]
 80011ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011d2:	61d3      	str	r3, [r2, #28]
 80011d4:	e7dc      	b.n	8001190 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <HAL_RCC_OscConfig+0x40c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb40 	bl	8000860 <HAL_GetTick>
 80011e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e2:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011ea:	d006      	beq.n	80011fa <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff fb38 	bl	8000860 <HAL_GetTick>
 80011f0:	1b40      	subs	r0, r0, r5
 80011f2:	2802      	cmp	r0, #2
 80011f4:	d9f5      	bls.n	80011e2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80011f6:	2003      	movs	r0, #3
 80011f8:	e041      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011fa:	6a23      	ldr	r3, [r4, #32]
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d01a      	beq.n	8001238 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001202:	4923      	ldr	r1, [pc, #140]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 8001204:	684b      	ldr	r3, [r1, #4]
 8001206:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800120a:	6a22      	ldr	r2, [r4, #32]
 800120c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800120e:	4302      	orrs	r2, r0
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_RCC_OscConfig+0x40c>)
 8001216:	2201      	movs	r2, #1
 8001218:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800121a:	f7ff fb21 	bl	8000860 <HAL_GetTick>
 800121e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001228:	d10e      	bne.n	8001248 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122a:	f7ff fb19 	bl	8000860 <HAL_GetTick>
 800122e:	1b00      	subs	r0, r0, r4
 8001230:	2802      	cmp	r0, #2
 8001232:	d9f5      	bls.n	8001220 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001234:	2003      	movs	r0, #3
 8001236:	e022      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001238:	4a15      	ldr	r2, [pc, #84]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 800123a:	6853      	ldr	r3, [r2, #4]
 800123c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001240:	68a1      	ldr	r1, [r4, #8]
 8001242:	430b      	orrs	r3, r1
 8001244:	6053      	str	r3, [r2, #4]
 8001246:	e7dc      	b.n	8001202 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001248:	2000      	movs	r0, #0
 800124a:	e018      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
 800124c:	2000      	movs	r0, #0
 800124e:	e016      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001250:	2b01      	cmp	r3, #1
 8001252:	d016      	beq.n	8001282 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_RCC_OscConfig+0x408>)
 8001256:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001258:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800125c:	6a22      	ldr	r2, [r4, #32]
 800125e:	4291      	cmp	r1, r2
 8001260:	d111      	bne.n	8001286 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001262:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001266:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001268:	4293      	cmp	r3, r2
 800126a:	d10e      	bne.n	800128a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 800126c:	2000      	movs	r0, #0
 800126e:	e006      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
}
 8001272:	4770      	bx	lr
        return HAL_ERROR;
 8001274:	2001      	movs	r0, #1
 8001276:	e002      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8001278:	2001      	movs	r0, #1
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 800127c:	2000      	movs	r0, #0
}
 800127e:	b002      	add	sp, #8
 8001280:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001282:	2001      	movs	r0, #1
 8001284:	e7fb      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8001286:	2001      	movs	r0, #1
 8001288:	e7f9      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
 800128a:	2001      	movs	r0, #1
 800128c:	e7f7      	b.n	800127e <HAL_RCC_OscConfig+0x3f6>
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	42420000 	.word	0x42420000

08001298 <HAL_RCC_GetSysClockFreq>:
{
 8001298:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x60>)
 800129c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800129e:	f10d 0c18 	add.w	ip, sp, #24
 80012a2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012a6:	f240 2301 	movw	r3, #513	; 0x201
 80012aa:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_RCC_GetSysClockFreq+0x64>)
 80012b0:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80012b2:	f003 020c 	and.w	r2, r3, #12
 80012b6:	2a08      	cmp	r2, #8
 80012b8:	d002      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80012ba:	4811      	ldr	r0, [pc, #68]	; (8001300 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80012bc:	b006      	add	sp, #24
 80012be:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012c0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80012c4:	3218      	adds	r2, #24
 80012c6:	446a      	add	r2, sp
 80012c8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80012d0:	d00d      	beq.n	80012ee <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_RCC_GetSysClockFreq+0x64>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80012da:	3318      	adds	r3, #24
 80012dc:	446b      	add	r3, sp
 80012de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012e2:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_RCC_GetSysClockFreq+0x68>)
 80012e4:	fb02 f000 	mul.w	r0, r2, r0
 80012e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80012ec:	e7e6      	b.n	80012bc <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_RCC_GetSysClockFreq+0x6c>)
 80012f0:	fb03 f000 	mul.w	r0, r3, r0
 80012f4:	e7e2      	b.n	80012bc <HAL_RCC_GetSysClockFreq+0x24>
 80012f6:	bf00      	nop
 80012f8:	08002a68 	.word	0x08002a68
 80012fc:	40021000 	.word	0x40021000
 8001300:	007a1200 	.word	0x007a1200
 8001304:	003d0900 	.word	0x003d0900

08001308 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001308:	2800      	cmp	r0, #0
 800130a:	f000 80a0 	beq.w	800144e <HAL_RCC_ClockConfig+0x146>
{
 800130e:	b570      	push	{r4, r5, r6, lr}
 8001310:	460d      	mov	r5, r1
 8001312:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001314:	4b52      	ldr	r3, [pc, #328]	; (8001460 <HAL_RCC_ClockConfig+0x158>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	428b      	cmp	r3, r1
 800131e:	d20b      	bcs.n	8001338 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001320:	4a4f      	ldr	r2, [pc, #316]	; (8001460 <HAL_RCC_ClockConfig+0x158>)
 8001322:	6813      	ldr	r3, [r2, #0]
 8001324:	f023 0307 	bic.w	r3, r3, #7
 8001328:	430b      	orrs	r3, r1
 800132a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800132c:	6813      	ldr	r3, [r2, #0]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	428b      	cmp	r3, r1
 8001334:	f040 808d 	bne.w	8001452 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	f013 0f02 	tst.w	r3, #2
 800133e:	d017      	beq.n	8001370 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001340:	f013 0f04 	tst.w	r3, #4
 8001344:	d004      	beq.n	8001350 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001346:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 8001348:	6853      	ldr	r3, [r2, #4]
 800134a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800134e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	f013 0f08 	tst.w	r3, #8
 8001356:	d004      	beq.n	8001362 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001358:	4a42      	ldr	r2, [pc, #264]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 800135a:	6853      	ldr	r3, [r2, #4]
 800135c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001360:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001362:	4a40      	ldr	r2, [pc, #256]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 8001364:	6853      	ldr	r3, [r2, #4]
 8001366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800136a:	68a1      	ldr	r1, [r4, #8]
 800136c:	430b      	orrs	r3, r1
 800136e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	f013 0f01 	tst.w	r3, #1
 8001376:	d031      	beq.n	80013dc <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001378:	6863      	ldr	r3, [r4, #4]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d020      	beq.n	80013c0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800137e:	2b02      	cmp	r3, #2
 8001380:	d025      	beq.n	80013ce <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001382:	4a38      	ldr	r2, [pc, #224]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	f012 0f02 	tst.w	r2, #2
 800138a:	d064      	beq.n	8001456 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800138c:	4935      	ldr	r1, [pc, #212]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 800138e:	684a      	ldr	r2, [r1, #4]
 8001390:	f022 0203 	bic.w	r2, r2, #3
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001398:	f7ff fa62 	bl	8000860 <HAL_GetTick>
 800139c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	6862      	ldr	r2, [r4, #4]
 80013a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013ac:	d016      	beq.n	80013dc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ae:	f7ff fa57 	bl	8000860 <HAL_GetTick>
 80013b2:	1b80      	subs	r0, r0, r6
 80013b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80013b8:	4298      	cmp	r0, r3
 80013ba:	d9f0      	bls.n	800139e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80013bc:	2003      	movs	r0, #3
 80013be:	e045      	b.n	800144c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c0:	4a28      	ldr	r2, [pc, #160]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80013c8:	d1e0      	bne.n	800138c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80013ca:	2001      	movs	r0, #1
 80013cc:	e03e      	b.n	800144c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ce:	4a25      	ldr	r2, [pc, #148]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80013d6:	d1d9      	bne.n	800138c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80013d8:	2001      	movs	r0, #1
 80013da:	e037      	b.n	800144c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_RCC_ClockConfig+0x158>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	42ab      	cmp	r3, r5
 80013e6:	d90a      	bls.n	80013fe <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <HAL_RCC_ClockConfig+0x158>)
 80013ea:	6813      	ldr	r3, [r2, #0]
 80013ec:	f023 0307 	bic.w	r3, r3, #7
 80013f0:	432b      	orrs	r3, r5
 80013f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f4:	6813      	ldr	r3, [r2, #0]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	42ab      	cmp	r3, r5
 80013fc:	d12d      	bne.n	800145a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	f013 0f04 	tst.w	r3, #4
 8001404:	d006      	beq.n	8001414 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001406:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 8001408:	6853      	ldr	r3, [r2, #4]
 800140a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800140e:	68e1      	ldr	r1, [r4, #12]
 8001410:	430b      	orrs	r3, r1
 8001412:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	f013 0f08 	tst.w	r3, #8
 800141a:	d007      	beq.n	800142c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 800141e:	6853      	ldr	r3, [r2, #4]
 8001420:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001424:	6921      	ldr	r1, [r4, #16]
 8001426:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800142a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800142c:	f7ff ff34 	bl	8001298 <HAL_RCC_GetSysClockFreq>
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_RCC_ClockConfig+0x15c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001438:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_RCC_ClockConfig+0x160>)
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	40d8      	lsrs	r0, r3
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_ClockConfig+0x164>)
 8001440:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_ClockConfig+0x168>)
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	f7ff f9c7 	bl	80007d8 <HAL_InitTick>
  return HAL_OK;
 800144a:	2000      	movs	r0, #0
}
 800144c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800144e:	2001      	movs	r0, #1
}
 8001450:	4770      	bx	lr
    return HAL_ERROR;
 8001452:	2001      	movs	r0, #1
 8001454:	e7fa      	b.n	800144c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001456:	2001      	movs	r0, #1
 8001458:	e7f8      	b.n	800144c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
 800145c:	e7f6      	b.n	800144c <HAL_RCC_ClockConfig+0x144>
 800145e:	bf00      	nop
 8001460:	40022000 	.word	0x40022000
 8001464:	40021000 	.word	0x40021000
 8001468:	08002a50 	.word	0x08002a50
 800146c:	20000004 	.word	0x20000004
 8001470:	2000000c 	.word	0x2000000c

08001474 <HAL_RCC_GetHCLKFreq>:
}
 8001474:	4b01      	ldr	r3, [pc, #4]	; (800147c <HAL_RCC_GetHCLKFreq+0x8>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_RCC_GetPCLK1Freq>:
{
 8001480:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001482:	f7ff fff7 	bl	8001474 <HAL_RCC_GetHCLKFreq>
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800148e:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
}
 8001492:	40d8      	lsrs	r0, r3
 8001494:	bd08      	pop	{r3, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	08002a60 	.word	0x08002a60

080014a0 <HAL_RCC_GetPCLK2Freq>:
{
 80014a0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014a2:	f7ff ffe7 	bl	8001474 <HAL_RCC_GetHCLKFreq>
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80014ae:	4a03      	ldr	r2, [pc, #12]	; (80014bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80014b2:	40d8      	lsrs	r0, r3
 80014b4:	bd08      	pop	{r3, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	08002a60 	.word	0x08002a60

080014c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014c0:	b510      	push	{r4, lr}
 80014c2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014c4:	6802      	ldr	r2, [r0, #0]
 80014c6:	6913      	ldr	r3, [r2, #16]
 80014c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014cc:	68c1      	ldr	r1, [r0, #12]
 80014ce:	430b      	orrs	r3, r1
 80014d0:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80014d2:	6883      	ldr	r3, [r0, #8]
 80014d4:	6902      	ldr	r2, [r0, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	6942      	ldr	r2, [r0, #20]
 80014da:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80014dc:	6801      	ldr	r1, [r0, #0]
 80014de:	68cb      	ldr	r3, [r1, #12]
 80014e0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80014e4:	f023 030c 	bic.w	r3, r3, #12
 80014e8:	4313      	orrs	r3, r2
 80014ea:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014ec:	6802      	ldr	r2, [r0, #0]
 80014ee:	6953      	ldr	r3, [r2, #20]
 80014f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014f4:	6981      	ldr	r1, [r0, #24]
 80014f6:	430b      	orrs	r3, r1
 80014f8:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80014fa:	6802      	ldr	r2, [r0, #0]
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <UART_SetConfig+0x8c>)
 80014fe:	429a      	cmp	r2, r3
 8001500:	d020      	beq.n	8001544 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001502:	f7ff ffbd 	bl	8001480 <HAL_RCC_GetPCLK1Freq>
 8001506:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001508:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800150c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001510:	6863      	ldr	r3, [r4, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	fbb2 f2f3 	udiv	r2, r2, r3
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <UART_SetConfig+0x90>)
 800151a:	fba0 3102 	umull	r3, r1, r0, r2
 800151e:	0949      	lsrs	r1, r1, #5
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	fb03 2311 	mls	r3, r3, r1, r2
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	3332      	adds	r3, #50	; 0x32
 800152a:	fba0 2303 	umull	r2, r3, r0, r3
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001534:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	6821      	ldr	r1, [r4, #0]
 800153e:	4413      	add	r3, r2
 8001540:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8001542:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001544:	f7ff ffac 	bl	80014a0 <HAL_RCC_GetPCLK2Freq>
 8001548:	4602      	mov	r2, r0
 800154a:	e7dd      	b.n	8001508 <UART_SetConfig+0x48>
 800154c:	40013800 	.word	0x40013800
 8001550:	51eb851f 	.word	0x51eb851f

08001554 <UART_WaitOnFlagUntilTimeout>:
{
 8001554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001558:	4605      	mov	r5, r0
 800155a:	460f      	mov	r7, r1
 800155c:	4616      	mov	r6, r2
 800155e:	4699      	mov	r9, r3
 8001560:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001564:	682c      	ldr	r4, [r5, #0]
 8001566:	6824      	ldr	r4, [r4, #0]
 8001568:	ea37 0304 	bics.w	r3, r7, r4
 800156c:	bf0c      	ite	eq
 800156e:	f04f 0c01 	moveq.w	ip, #1
 8001572:	f04f 0c00 	movne.w	ip, #0
 8001576:	45b4      	cmp	ip, r6
 8001578:	d11f      	bne.n	80015ba <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 800157a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800157e:	d0f1      	beq.n	8001564 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001580:	f1b8 0f00 	cmp.w	r8, #0
 8001584:	d005      	beq.n	8001592 <UART_WaitOnFlagUntilTimeout+0x3e>
 8001586:	f7ff f96b 	bl	8000860 <HAL_GetTick>
 800158a:	eba0 0009 	sub.w	r0, r0, r9
 800158e:	4540      	cmp	r0, r8
 8001590:	d9e8      	bls.n	8001564 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001592:	682a      	ldr	r2, [r5, #0]
 8001594:	68d3      	ldr	r3, [r2, #12]
 8001596:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800159a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800159c:	682a      	ldr	r2, [r5, #0]
 800159e:	6953      	ldr	r3, [r2, #20]
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80015a6:	2320      	movs	r3, #32
 80015a8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80015ac:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80015b0:	2300      	movs	r3, #0
 80015b2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80015b6:	2003      	movs	r0, #3
 80015b8:	e000      	b.n	80015bc <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 80015ba:	2000      	movs	r0, #0
}
 80015bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080015c0 <HAL_UART_Init>:
  if (huart == NULL)
 80015c0:	b358      	cbz	r0, 800161a <HAL_UART_Init+0x5a>
{
 80015c2:	b510      	push	{r4, lr}
 80015c4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80015c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015ca:	b30b      	cbz	r3, 8001610 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80015cc:	2324      	movs	r3, #36	; 0x24
 80015ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80015d2:	6822      	ldr	r2, [r4, #0]
 80015d4:	68d3      	ldr	r3, [r2, #12]
 80015d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015da:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff ff6f 	bl	80014c0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015e2:	6822      	ldr	r2, [r4, #0]
 80015e4:	6913      	ldr	r3, [r2, #16]
 80015e6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80015ea:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015ec:	6822      	ldr	r2, [r4, #0]
 80015ee:	6953      	ldr	r3, [r2, #20]
 80015f0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80015f4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	68d3      	ldr	r3, [r2, #12]
 80015fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015fe:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001600:	2000      	movs	r0, #0
 8001602:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001604:	2320      	movs	r3, #32
 8001606:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800160a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800160e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001610:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001614:	f7fe fff0 	bl	80005f8 <HAL_UART_MspInit>
 8001618:	e7d8      	b.n	80015cc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800161a:	2001      	movs	r0, #1
}
 800161c:	4770      	bx	lr

0800161e <HAL_UART_Transmit>:
{
 800161e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001626:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b20      	cmp	r3, #32
 800162e:	d154      	bne.n	80016da <HAL_UART_Transmit+0xbc>
 8001630:	4604      	mov	r4, r0
 8001632:	460d      	mov	r5, r1
 8001634:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001636:	2900      	cmp	r1, #0
 8001638:	d053      	beq.n	80016e2 <HAL_UART_Transmit+0xc4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	d053      	beq.n	80016e6 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800163e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001642:	2b01      	cmp	r3, #1
 8001644:	d051      	beq.n	80016ea <HAL_UART_Transmit+0xcc>
 8001646:	2301      	movs	r3, #1
 8001648:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800164c:	2300      	movs	r3, #0
 800164e:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001650:	2321      	movs	r3, #33	; 0x21
 8001652:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8001656:	f7ff f903 	bl	8000860 <HAL_GetTick>
 800165a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800165c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001660:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001664:	68a3      	ldr	r3, [r4, #8]
 8001666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166a:	d005      	beq.n	8001678 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 800166c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001670:	2300      	movs	r3, #0
 8001672:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001676:	e012      	b.n	800169e <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001678:	6923      	ldr	r3, [r4, #16]
 800167a:	b113      	cbz	r3, 8001682 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 800167c:	f04f 0800 	mov.w	r8, #0
 8001680:	e7f6      	b.n	8001670 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8001682:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001684:	2500      	movs	r5, #0
 8001686:	e7f3      	b.n	8001670 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001688:	f838 3b02 	ldrh.w	r3, [r8], #2
 800168c:	6822      	ldr	r2, [r4, #0]
 800168e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001692:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001694:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001696:	b292      	uxth	r2, r2
 8001698:	3a01      	subs	r2, #1
 800169a:	b292      	uxth	r2, r2
 800169c:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800169e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b173      	cbz	r3, 80016c2 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016a4:	9600      	str	r6, [sp, #0]
 80016a6:	463b      	mov	r3, r7
 80016a8:	2200      	movs	r2, #0
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff ff51 	bl	8001554 <UART_WaitOnFlagUntilTimeout>
 80016b2:	b9e0      	cbnz	r0, 80016ee <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80016b4:	2d00      	cmp	r5, #0
 80016b6:	d0e7      	beq.n	8001688 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016b8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016c0:	e7e8      	b.n	8001694 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016c2:	9600      	str	r6, [sp, #0]
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	2140      	movs	r1, #64	; 0x40
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff ff42 	bl	8001554 <UART_WaitOnFlagUntilTimeout>
 80016d0:	b978      	cbnz	r0, 80016f2 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80016d2:	2320      	movs	r3, #32
 80016d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80016d8:	e000      	b.n	80016dc <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80016da:	2002      	movs	r0, #2
}
 80016dc:	b002      	add	sp, #8
 80016de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80016e2:	2001      	movs	r0, #1
 80016e4:	e7fa      	b.n	80016dc <HAL_UART_Transmit+0xbe>
 80016e6:	2001      	movs	r0, #1
 80016e8:	e7f8      	b.n	80016dc <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80016ea:	2002      	movs	r0, #2
 80016ec:	e7f6      	b.n	80016dc <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80016ee:	2003      	movs	r0, #3
 80016f0:	e7f4      	b.n	80016dc <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80016f2:	2003      	movs	r0, #3
 80016f4:	e7f2      	b.n	80016dc <HAL_UART_Transmit+0xbe>

080016f6 <HAL_UART_Receive>:
{
 80016f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80016fe:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b20      	cmp	r3, #32
 8001706:	d15c      	bne.n	80017c2 <HAL_UART_Receive+0xcc>
 8001708:	4604      	mov	r4, r0
 800170a:	460d      	mov	r5, r1
 800170c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800170e:	2900      	cmp	r1, #0
 8001710:	d05b      	beq.n	80017ca <HAL_UART_Receive+0xd4>
 8001712:	2a00      	cmp	r2, #0
 8001714:	d05b      	beq.n	80017ce <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8001716:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800171a:	2b01      	cmp	r3, #1
 800171c:	d059      	beq.n	80017d2 <HAL_UART_Receive+0xdc>
 800171e:	2301      	movs	r3, #1
 8001720:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001724:	2300      	movs	r3, #0
 8001726:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001728:	2222      	movs	r2, #34	; 0x22
 800172a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800172e:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8001730:	f7ff f896 	bl	8000860 <HAL_GetTick>
 8001734:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8001736:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800173a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800173e:	68a3      	ldr	r3, [r4, #8]
 8001740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001744:	d005      	beq.n	8001752 <HAL_UART_Receive+0x5c>
      pdata16bits = NULL;
 8001746:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 800174a:	2300      	movs	r3, #0
 800174c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 8001750:	e017      	b.n	8001782 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001752:	6923      	ldr	r3, [r4, #16]
 8001754:	b113      	cbz	r3, 800175c <HAL_UART_Receive+0x66>
      pdata16bits = NULL;
 8001756:	f04f 0800 	mov.w	r8, #0
 800175a:	e7f6      	b.n	800174a <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 800175c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800175e:	2500      	movs	r5, #0
 8001760:	e7f3      	b.n	800174a <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800176a:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 800176e:	e003      	b.n	8001778 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8001776:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8001778:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800177a:	b292      	uxth	r2, r2
 800177c:	3a01      	subs	r2, #1
 800177e:	b292      	uxth	r2, r2
 8001780:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001782:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001784:	b29b      	uxth	r3, r3
 8001786:	b1bb      	cbz	r3, 80017b8 <HAL_UART_Receive+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001788:	9600      	str	r6, [sp, #0]
 800178a:	463b      	mov	r3, r7
 800178c:	2200      	movs	r2, #0
 800178e:	2120      	movs	r1, #32
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff fedf 	bl	8001554 <UART_WaitOnFlagUntilTimeout>
 8001796:	b9f0      	cbnz	r0, 80017d6 <HAL_UART_Receive+0xe0>
      if (pdata8bits == NULL)
 8001798:	2d00      	cmp	r5, #0
 800179a:	d0e2      	beq.n	8001762 <HAL_UART_Receive+0x6c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800179c:	68a3      	ldr	r3, [r4, #8]
 800179e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a2:	d0e5      	beq.n	8001770 <HAL_UART_Receive+0x7a>
 80017a4:	b913      	cbnz	r3, 80017ac <HAL_UART_Receive+0xb6>
 80017a6:	6923      	ldr	r3, [r4, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0e1      	beq.n	8001770 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017b4:	702b      	strb	r3, [r5, #0]
 80017b6:	e7de      	b.n	8001776 <HAL_UART_Receive+0x80>
    huart->RxState = HAL_UART_STATE_READY;
 80017b8:	2320      	movs	r3, #32
 80017ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80017be:	2000      	movs	r0, #0
 80017c0:	e000      	b.n	80017c4 <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 80017c2:	2002      	movs	r0, #2
}
 80017c4:	b002      	add	sp, #8
 80017c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80017ca:	2001      	movs	r0, #1
 80017cc:	e7fa      	b.n	80017c4 <HAL_UART_Receive+0xce>
 80017ce:	2001      	movs	r0, #1
 80017d0:	e7f8      	b.n	80017c4 <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 80017d2:	2002      	movs	r0, #2
 80017d4:	e7f6      	b.n	80017c4 <HAL_UART_Receive+0xce>
        return HAL_TIMEOUT;
 80017d6:	2003      	movs	r0, #3
 80017d8:	e7f4      	b.n	80017c4 <HAL_UART_Receive+0xce>
	...

080017dc <__errno>:
 80017dc:	4b01      	ldr	r3, [pc, #4]	; (80017e4 <__errno+0x8>)
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000010 	.word	0x20000010

080017e8 <__libc_init_array>:
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	2600      	movs	r6, #0
 80017ec:	4d0c      	ldr	r5, [pc, #48]	; (8001820 <__libc_init_array+0x38>)
 80017ee:	4c0d      	ldr	r4, [pc, #52]	; (8001824 <__libc_init_array+0x3c>)
 80017f0:	1b64      	subs	r4, r4, r5
 80017f2:	10a4      	asrs	r4, r4, #2
 80017f4:	42a6      	cmp	r6, r4
 80017f6:	d109      	bne.n	800180c <__libc_init_array+0x24>
 80017f8:	f001 f82c 	bl	8002854 <_init>
 80017fc:	2600      	movs	r6, #0
 80017fe:	4d0a      	ldr	r5, [pc, #40]	; (8001828 <__libc_init_array+0x40>)
 8001800:	4c0a      	ldr	r4, [pc, #40]	; (800182c <__libc_init_array+0x44>)
 8001802:	1b64      	subs	r4, r4, r5
 8001804:	10a4      	asrs	r4, r4, #2
 8001806:	42a6      	cmp	r6, r4
 8001808:	d105      	bne.n	8001816 <__libc_init_array+0x2e>
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001810:	4798      	blx	r3
 8001812:	3601      	adds	r6, #1
 8001814:	e7ee      	b.n	80017f4 <__libc_init_array+0xc>
 8001816:	f855 3b04 	ldr.w	r3, [r5], #4
 800181a:	4798      	blx	r3
 800181c:	3601      	adds	r6, #1
 800181e:	e7f2      	b.n	8001806 <__libc_init_array+0x1e>
 8001820:	08002b14 	.word	0x08002b14
 8001824:	08002b14 	.word	0x08002b14
 8001828:	08002b14 	.word	0x08002b14
 800182c:	08002b18 	.word	0x08002b18

08001830 <memset>:
 8001830:	4603      	mov	r3, r0
 8001832:	4402      	add	r2, r0
 8001834:	4293      	cmp	r3, r2
 8001836:	d100      	bne.n	800183a <memset+0xa>
 8001838:	4770      	bx	lr
 800183a:	f803 1b01 	strb.w	r1, [r3], #1
 800183e:	e7f9      	b.n	8001834 <memset+0x4>

08001840 <iprintf>:
 8001840:	b40f      	push	{r0, r1, r2, r3}
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <iprintf+0x2c>)
 8001844:	b513      	push	{r0, r1, r4, lr}
 8001846:	681c      	ldr	r4, [r3, #0]
 8001848:	b124      	cbz	r4, 8001854 <iprintf+0x14>
 800184a:	69a3      	ldr	r3, [r4, #24]
 800184c:	b913      	cbnz	r3, 8001854 <iprintf+0x14>
 800184e:	4620      	mov	r0, r4
 8001850:	f000 fa5a 	bl	8001d08 <__sinit>
 8001854:	ab05      	add	r3, sp, #20
 8001856:	4620      	mov	r0, r4
 8001858:	9a04      	ldr	r2, [sp, #16]
 800185a:	68a1      	ldr	r1, [r4, #8]
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	f000 fc5d 	bl	800211c <_vfiprintf_r>
 8001862:	b002      	add	sp, #8
 8001864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001868:	b004      	add	sp, #16
 800186a:	4770      	bx	lr
 800186c:	20000010 	.word	0x20000010

08001870 <_puts_r>:
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	460e      	mov	r6, r1
 8001874:	4605      	mov	r5, r0
 8001876:	b118      	cbz	r0, 8001880 <_puts_r+0x10>
 8001878:	6983      	ldr	r3, [r0, #24]
 800187a:	b90b      	cbnz	r3, 8001880 <_puts_r+0x10>
 800187c:	f000 fa44 	bl	8001d08 <__sinit>
 8001880:	69ab      	ldr	r3, [r5, #24]
 8001882:	68ac      	ldr	r4, [r5, #8]
 8001884:	b913      	cbnz	r3, 800188c <_puts_r+0x1c>
 8001886:	4628      	mov	r0, r5
 8001888:	f000 fa3e 	bl	8001d08 <__sinit>
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <_puts_r+0xd0>)
 800188e:	429c      	cmp	r4, r3
 8001890:	d120      	bne.n	80018d4 <_puts_r+0x64>
 8001892:	686c      	ldr	r4, [r5, #4]
 8001894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001896:	07db      	lsls	r3, r3, #31
 8001898:	d405      	bmi.n	80018a6 <_puts_r+0x36>
 800189a:	89a3      	ldrh	r3, [r4, #12]
 800189c:	0598      	lsls	r0, r3, #22
 800189e:	d402      	bmi.n	80018a6 <_puts_r+0x36>
 80018a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018a2:	f000 facf 	bl	8001e44 <__retarget_lock_acquire_recursive>
 80018a6:	89a3      	ldrh	r3, [r4, #12]
 80018a8:	0719      	lsls	r1, r3, #28
 80018aa:	d51d      	bpl.n	80018e8 <_puts_r+0x78>
 80018ac:	6923      	ldr	r3, [r4, #16]
 80018ae:	b1db      	cbz	r3, 80018e8 <_puts_r+0x78>
 80018b0:	3e01      	subs	r6, #1
 80018b2:	68a3      	ldr	r3, [r4, #8]
 80018b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80018b8:	3b01      	subs	r3, #1
 80018ba:	60a3      	str	r3, [r4, #8]
 80018bc:	bb39      	cbnz	r1, 800190e <_puts_r+0x9e>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	da38      	bge.n	8001934 <_puts_r+0xc4>
 80018c2:	4622      	mov	r2, r4
 80018c4:	210a      	movs	r1, #10
 80018c6:	4628      	mov	r0, r5
 80018c8:	f000 f848 	bl	800195c <__swbuf_r>
 80018cc:	3001      	adds	r0, #1
 80018ce:	d011      	beq.n	80018f4 <_puts_r+0x84>
 80018d0:	250a      	movs	r5, #10
 80018d2:	e011      	b.n	80018f8 <_puts_r+0x88>
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <_puts_r+0xd4>)
 80018d6:	429c      	cmp	r4, r3
 80018d8:	d101      	bne.n	80018de <_puts_r+0x6e>
 80018da:	68ac      	ldr	r4, [r5, #8]
 80018dc:	e7da      	b.n	8001894 <_puts_r+0x24>
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <_puts_r+0xd8>)
 80018e0:	429c      	cmp	r4, r3
 80018e2:	bf08      	it	eq
 80018e4:	68ec      	ldreq	r4, [r5, #12]
 80018e6:	e7d5      	b.n	8001894 <_puts_r+0x24>
 80018e8:	4621      	mov	r1, r4
 80018ea:	4628      	mov	r0, r5
 80018ec:	f000 f888 	bl	8001a00 <__swsetup_r>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d0dd      	beq.n	80018b0 <_puts_r+0x40>
 80018f4:	f04f 35ff 	mov.w	r5, #4294967295
 80018f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018fa:	07da      	lsls	r2, r3, #31
 80018fc:	d405      	bmi.n	800190a <_puts_r+0x9a>
 80018fe:	89a3      	ldrh	r3, [r4, #12]
 8001900:	059b      	lsls	r3, r3, #22
 8001902:	d402      	bmi.n	800190a <_puts_r+0x9a>
 8001904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001906:	f000 fa9e 	bl	8001e46 <__retarget_lock_release_recursive>
 800190a:	4628      	mov	r0, r5
 800190c:	bd70      	pop	{r4, r5, r6, pc}
 800190e:	2b00      	cmp	r3, #0
 8001910:	da04      	bge.n	800191c <_puts_r+0xac>
 8001912:	69a2      	ldr	r2, [r4, #24]
 8001914:	429a      	cmp	r2, r3
 8001916:	dc06      	bgt.n	8001926 <_puts_r+0xb6>
 8001918:	290a      	cmp	r1, #10
 800191a:	d004      	beq.n	8001926 <_puts_r+0xb6>
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	6022      	str	r2, [r4, #0]
 8001922:	7019      	strb	r1, [r3, #0]
 8001924:	e7c5      	b.n	80018b2 <_puts_r+0x42>
 8001926:	4622      	mov	r2, r4
 8001928:	4628      	mov	r0, r5
 800192a:	f000 f817 	bl	800195c <__swbuf_r>
 800192e:	3001      	adds	r0, #1
 8001930:	d1bf      	bne.n	80018b2 <_puts_r+0x42>
 8001932:	e7df      	b.n	80018f4 <_puts_r+0x84>
 8001934:	250a      	movs	r5, #10
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	6022      	str	r2, [r4, #0]
 800193c:	701d      	strb	r5, [r3, #0]
 800193e:	e7db      	b.n	80018f8 <_puts_r+0x88>
 8001940:	08002aa0 	.word	0x08002aa0
 8001944:	08002ac0 	.word	0x08002ac0
 8001948:	08002a80 	.word	0x08002a80

0800194c <puts>:
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <puts+0xc>)
 800194e:	4601      	mov	r1, r0
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	f7ff bf8d 	b.w	8001870 <_puts_r>
 8001956:	bf00      	nop
 8001958:	20000010 	.word	0x20000010

0800195c <__swbuf_r>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	460e      	mov	r6, r1
 8001960:	4614      	mov	r4, r2
 8001962:	4605      	mov	r5, r0
 8001964:	b118      	cbz	r0, 800196e <__swbuf_r+0x12>
 8001966:	6983      	ldr	r3, [r0, #24]
 8001968:	b90b      	cbnz	r3, 800196e <__swbuf_r+0x12>
 800196a:	f000 f9cd 	bl	8001d08 <__sinit>
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <__swbuf_r+0x98>)
 8001970:	429c      	cmp	r4, r3
 8001972:	d12b      	bne.n	80019cc <__swbuf_r+0x70>
 8001974:	686c      	ldr	r4, [r5, #4]
 8001976:	69a3      	ldr	r3, [r4, #24]
 8001978:	60a3      	str	r3, [r4, #8]
 800197a:	89a3      	ldrh	r3, [r4, #12]
 800197c:	071a      	lsls	r2, r3, #28
 800197e:	d52f      	bpl.n	80019e0 <__swbuf_r+0x84>
 8001980:	6923      	ldr	r3, [r4, #16]
 8001982:	b36b      	cbz	r3, 80019e0 <__swbuf_r+0x84>
 8001984:	6923      	ldr	r3, [r4, #16]
 8001986:	6820      	ldr	r0, [r4, #0]
 8001988:	b2f6      	uxtb	r6, r6
 800198a:	1ac0      	subs	r0, r0, r3
 800198c:	6963      	ldr	r3, [r4, #20]
 800198e:	4637      	mov	r7, r6
 8001990:	4283      	cmp	r3, r0
 8001992:	dc04      	bgt.n	800199e <__swbuf_r+0x42>
 8001994:	4621      	mov	r1, r4
 8001996:	4628      	mov	r0, r5
 8001998:	f000 f922 	bl	8001be0 <_fflush_r>
 800199c:	bb30      	cbnz	r0, 80019ec <__swbuf_r+0x90>
 800199e:	68a3      	ldr	r3, [r4, #8]
 80019a0:	3001      	adds	r0, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	60a3      	str	r3, [r4, #8]
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	6022      	str	r2, [r4, #0]
 80019ac:	701e      	strb	r6, [r3, #0]
 80019ae:	6963      	ldr	r3, [r4, #20]
 80019b0:	4283      	cmp	r3, r0
 80019b2:	d004      	beq.n	80019be <__swbuf_r+0x62>
 80019b4:	89a3      	ldrh	r3, [r4, #12]
 80019b6:	07db      	lsls	r3, r3, #31
 80019b8:	d506      	bpl.n	80019c8 <__swbuf_r+0x6c>
 80019ba:	2e0a      	cmp	r6, #10
 80019bc:	d104      	bne.n	80019c8 <__swbuf_r+0x6c>
 80019be:	4621      	mov	r1, r4
 80019c0:	4628      	mov	r0, r5
 80019c2:	f000 f90d 	bl	8001be0 <_fflush_r>
 80019c6:	b988      	cbnz	r0, 80019ec <__swbuf_r+0x90>
 80019c8:	4638      	mov	r0, r7
 80019ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <__swbuf_r+0x9c>)
 80019ce:	429c      	cmp	r4, r3
 80019d0:	d101      	bne.n	80019d6 <__swbuf_r+0x7a>
 80019d2:	68ac      	ldr	r4, [r5, #8]
 80019d4:	e7cf      	b.n	8001976 <__swbuf_r+0x1a>
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <__swbuf_r+0xa0>)
 80019d8:	429c      	cmp	r4, r3
 80019da:	bf08      	it	eq
 80019dc:	68ec      	ldreq	r4, [r5, #12]
 80019de:	e7ca      	b.n	8001976 <__swbuf_r+0x1a>
 80019e0:	4621      	mov	r1, r4
 80019e2:	4628      	mov	r0, r5
 80019e4:	f000 f80c 	bl	8001a00 <__swsetup_r>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d0cb      	beq.n	8001984 <__swbuf_r+0x28>
 80019ec:	f04f 37ff 	mov.w	r7, #4294967295
 80019f0:	e7ea      	b.n	80019c8 <__swbuf_r+0x6c>
 80019f2:	bf00      	nop
 80019f4:	08002aa0 	.word	0x08002aa0
 80019f8:	08002ac0 	.word	0x08002ac0
 80019fc:	08002a80 	.word	0x08002a80

08001a00 <__swsetup_r>:
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <__swsetup_r+0xcc>)
 8001a02:	b570      	push	{r4, r5, r6, lr}
 8001a04:	681d      	ldr	r5, [r3, #0]
 8001a06:	4606      	mov	r6, r0
 8001a08:	460c      	mov	r4, r1
 8001a0a:	b125      	cbz	r5, 8001a16 <__swsetup_r+0x16>
 8001a0c:	69ab      	ldr	r3, [r5, #24]
 8001a0e:	b913      	cbnz	r3, 8001a16 <__swsetup_r+0x16>
 8001a10:	4628      	mov	r0, r5
 8001a12:	f000 f979 	bl	8001d08 <__sinit>
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <__swsetup_r+0xd0>)
 8001a18:	429c      	cmp	r4, r3
 8001a1a:	d10f      	bne.n	8001a3c <__swsetup_r+0x3c>
 8001a1c:	686c      	ldr	r4, [r5, #4]
 8001a1e:	89a3      	ldrh	r3, [r4, #12]
 8001a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a24:	0719      	lsls	r1, r3, #28
 8001a26:	d42c      	bmi.n	8001a82 <__swsetup_r+0x82>
 8001a28:	06dd      	lsls	r5, r3, #27
 8001a2a:	d411      	bmi.n	8001a50 <__swsetup_r+0x50>
 8001a2c:	2309      	movs	r3, #9
 8001a2e:	6033      	str	r3, [r6, #0]
 8001a30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	81a3      	strh	r3, [r4, #12]
 8001a3a:	e03e      	b.n	8001aba <__swsetup_r+0xba>
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <__swsetup_r+0xd4>)
 8001a3e:	429c      	cmp	r4, r3
 8001a40:	d101      	bne.n	8001a46 <__swsetup_r+0x46>
 8001a42:	68ac      	ldr	r4, [r5, #8]
 8001a44:	e7eb      	b.n	8001a1e <__swsetup_r+0x1e>
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <__swsetup_r+0xd8>)
 8001a48:	429c      	cmp	r4, r3
 8001a4a:	bf08      	it	eq
 8001a4c:	68ec      	ldreq	r4, [r5, #12]
 8001a4e:	e7e6      	b.n	8001a1e <__swsetup_r+0x1e>
 8001a50:	0758      	lsls	r0, r3, #29
 8001a52:	d512      	bpl.n	8001a7a <__swsetup_r+0x7a>
 8001a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a56:	b141      	cbz	r1, 8001a6a <__swsetup_r+0x6a>
 8001a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a5c:	4299      	cmp	r1, r3
 8001a5e:	d002      	beq.n	8001a66 <__swsetup_r+0x66>
 8001a60:	4630      	mov	r0, r6
 8001a62:	f000 fa57 	bl	8001f14 <_free_r>
 8001a66:	2300      	movs	r3, #0
 8001a68:	6363      	str	r3, [r4, #52]	; 0x34
 8001a6a:	89a3      	ldrh	r3, [r4, #12]
 8001a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001a70:	81a3      	strh	r3, [r4, #12]
 8001a72:	2300      	movs	r3, #0
 8001a74:	6063      	str	r3, [r4, #4]
 8001a76:	6923      	ldr	r3, [r4, #16]
 8001a78:	6023      	str	r3, [r4, #0]
 8001a7a:	89a3      	ldrh	r3, [r4, #12]
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	81a3      	strh	r3, [r4, #12]
 8001a82:	6923      	ldr	r3, [r4, #16]
 8001a84:	b94b      	cbnz	r3, 8001a9a <__swsetup_r+0x9a>
 8001a86:	89a3      	ldrh	r3, [r4, #12]
 8001a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a90:	d003      	beq.n	8001a9a <__swsetup_r+0x9a>
 8001a92:	4621      	mov	r1, r4
 8001a94:	4630      	mov	r0, r6
 8001a96:	f000 f9fd 	bl	8001e94 <__smakebuf_r>
 8001a9a:	89a0      	ldrh	r0, [r4, #12]
 8001a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001aa0:	f010 0301 	ands.w	r3, r0, #1
 8001aa4:	d00a      	beq.n	8001abc <__swsetup_r+0xbc>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60a3      	str	r3, [r4, #8]
 8001aaa:	6963      	ldr	r3, [r4, #20]
 8001aac:	425b      	negs	r3, r3
 8001aae:	61a3      	str	r3, [r4, #24]
 8001ab0:	6923      	ldr	r3, [r4, #16]
 8001ab2:	b943      	cbnz	r3, 8001ac6 <__swsetup_r+0xc6>
 8001ab4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ab8:	d1ba      	bne.n	8001a30 <__swsetup_r+0x30>
 8001aba:	bd70      	pop	{r4, r5, r6, pc}
 8001abc:	0781      	lsls	r1, r0, #30
 8001abe:	bf58      	it	pl
 8001ac0:	6963      	ldrpl	r3, [r4, #20]
 8001ac2:	60a3      	str	r3, [r4, #8]
 8001ac4:	e7f4      	b.n	8001ab0 <__swsetup_r+0xb0>
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	e7f7      	b.n	8001aba <__swsetup_r+0xba>
 8001aca:	bf00      	nop
 8001acc:	20000010 	.word	0x20000010
 8001ad0:	08002aa0 	.word	0x08002aa0
 8001ad4:	08002ac0 	.word	0x08002ac0
 8001ad8:	08002a80 	.word	0x08002a80

08001adc <__sflush_r>:
 8001adc:	898a      	ldrh	r2, [r1, #12]
 8001ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae0:	4605      	mov	r5, r0
 8001ae2:	0710      	lsls	r0, r2, #28
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	d457      	bmi.n	8001b98 <__sflush_r+0xbc>
 8001ae8:	684b      	ldr	r3, [r1, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	dc04      	bgt.n	8001af8 <__sflush_r+0x1c>
 8001aee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	dc01      	bgt.n	8001af8 <__sflush_r+0x1c>
 8001af4:	2000      	movs	r0, #0
 8001af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001afa:	2e00      	cmp	r6, #0
 8001afc:	d0fa      	beq.n	8001af4 <__sflush_r+0x18>
 8001afe:	2300      	movs	r3, #0
 8001b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b04:	682f      	ldr	r7, [r5, #0]
 8001b06:	602b      	str	r3, [r5, #0]
 8001b08:	d032      	beq.n	8001b70 <__sflush_r+0x94>
 8001b0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b0c:	89a3      	ldrh	r3, [r4, #12]
 8001b0e:	075a      	lsls	r2, r3, #29
 8001b10:	d505      	bpl.n	8001b1e <__sflush_r+0x42>
 8001b12:	6863      	ldr	r3, [r4, #4]
 8001b14:	1ac0      	subs	r0, r0, r3
 8001b16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b18:	b10b      	cbz	r3, 8001b1e <__sflush_r+0x42>
 8001b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b1c:	1ac0      	subs	r0, r0, r3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	4602      	mov	r2, r0
 8001b22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b24:	4628      	mov	r0, r5
 8001b26:	6a21      	ldr	r1, [r4, #32]
 8001b28:	47b0      	blx	r6
 8001b2a:	1c43      	adds	r3, r0, #1
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	d106      	bne.n	8001b3e <__sflush_r+0x62>
 8001b30:	6829      	ldr	r1, [r5, #0]
 8001b32:	291d      	cmp	r1, #29
 8001b34:	d82c      	bhi.n	8001b90 <__sflush_r+0xb4>
 8001b36:	4a29      	ldr	r2, [pc, #164]	; (8001bdc <__sflush_r+0x100>)
 8001b38:	40ca      	lsrs	r2, r1
 8001b3a:	07d6      	lsls	r6, r2, #31
 8001b3c:	d528      	bpl.n	8001b90 <__sflush_r+0xb4>
 8001b3e:	2200      	movs	r2, #0
 8001b40:	6062      	str	r2, [r4, #4]
 8001b42:	6922      	ldr	r2, [r4, #16]
 8001b44:	04d9      	lsls	r1, r3, #19
 8001b46:	6022      	str	r2, [r4, #0]
 8001b48:	d504      	bpl.n	8001b54 <__sflush_r+0x78>
 8001b4a:	1c42      	adds	r2, r0, #1
 8001b4c:	d101      	bne.n	8001b52 <__sflush_r+0x76>
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	b903      	cbnz	r3, 8001b54 <__sflush_r+0x78>
 8001b52:	6560      	str	r0, [r4, #84]	; 0x54
 8001b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b56:	602f      	str	r7, [r5, #0]
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	d0cb      	beq.n	8001af4 <__sflush_r+0x18>
 8001b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b60:	4299      	cmp	r1, r3
 8001b62:	d002      	beq.n	8001b6a <__sflush_r+0x8e>
 8001b64:	4628      	mov	r0, r5
 8001b66:	f000 f9d5 	bl	8001f14 <_free_r>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	6360      	str	r0, [r4, #52]	; 0x34
 8001b6e:	e7c2      	b.n	8001af6 <__sflush_r+0x1a>
 8001b70:	6a21      	ldr	r1, [r4, #32]
 8001b72:	2301      	movs	r3, #1
 8001b74:	4628      	mov	r0, r5
 8001b76:	47b0      	blx	r6
 8001b78:	1c41      	adds	r1, r0, #1
 8001b7a:	d1c7      	bne.n	8001b0c <__sflush_r+0x30>
 8001b7c:	682b      	ldr	r3, [r5, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0c4      	beq.n	8001b0c <__sflush_r+0x30>
 8001b82:	2b1d      	cmp	r3, #29
 8001b84:	d001      	beq.n	8001b8a <__sflush_r+0xae>
 8001b86:	2b16      	cmp	r3, #22
 8001b88:	d101      	bne.n	8001b8e <__sflush_r+0xb2>
 8001b8a:	602f      	str	r7, [r5, #0]
 8001b8c:	e7b2      	b.n	8001af4 <__sflush_r+0x18>
 8001b8e:	89a3      	ldrh	r3, [r4, #12]
 8001b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b94:	81a3      	strh	r3, [r4, #12]
 8001b96:	e7ae      	b.n	8001af6 <__sflush_r+0x1a>
 8001b98:	690f      	ldr	r7, [r1, #16]
 8001b9a:	2f00      	cmp	r7, #0
 8001b9c:	d0aa      	beq.n	8001af4 <__sflush_r+0x18>
 8001b9e:	0793      	lsls	r3, r2, #30
 8001ba0:	bf18      	it	ne
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	680e      	ldr	r6, [r1, #0]
 8001ba6:	bf08      	it	eq
 8001ba8:	694b      	ldreq	r3, [r1, #20]
 8001baa:	1bf6      	subs	r6, r6, r7
 8001bac:	600f      	str	r7, [r1, #0]
 8001bae:	608b      	str	r3, [r1, #8]
 8001bb0:	2e00      	cmp	r6, #0
 8001bb2:	dd9f      	ble.n	8001af4 <__sflush_r+0x18>
 8001bb4:	4633      	mov	r3, r6
 8001bb6:	463a      	mov	r2, r7
 8001bb8:	4628      	mov	r0, r5
 8001bba:	6a21      	ldr	r1, [r4, #32]
 8001bbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001bc0:	47e0      	blx	ip
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	dc06      	bgt.n	8001bd4 <__sflush_r+0xf8>
 8001bc6:	89a3      	ldrh	r3, [r4, #12]
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd0:	81a3      	strh	r3, [r4, #12]
 8001bd2:	e790      	b.n	8001af6 <__sflush_r+0x1a>
 8001bd4:	4407      	add	r7, r0
 8001bd6:	1a36      	subs	r6, r6, r0
 8001bd8:	e7ea      	b.n	8001bb0 <__sflush_r+0xd4>
 8001bda:	bf00      	nop
 8001bdc:	20400001 	.word	0x20400001

08001be0 <_fflush_r>:
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	690b      	ldr	r3, [r1, #16]
 8001be4:	4605      	mov	r5, r0
 8001be6:	460c      	mov	r4, r1
 8001be8:	b913      	cbnz	r3, 8001bf0 <_fflush_r+0x10>
 8001bea:	2500      	movs	r5, #0
 8001bec:	4628      	mov	r0, r5
 8001bee:	bd38      	pop	{r3, r4, r5, pc}
 8001bf0:	b118      	cbz	r0, 8001bfa <_fflush_r+0x1a>
 8001bf2:	6983      	ldr	r3, [r0, #24]
 8001bf4:	b90b      	cbnz	r3, 8001bfa <_fflush_r+0x1a>
 8001bf6:	f000 f887 	bl	8001d08 <__sinit>
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <_fflush_r+0x6c>)
 8001bfc:	429c      	cmp	r4, r3
 8001bfe:	d11b      	bne.n	8001c38 <_fflush_r+0x58>
 8001c00:	686c      	ldr	r4, [r5, #4]
 8001c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0ef      	beq.n	8001bea <_fflush_r+0xa>
 8001c0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001c0c:	07d0      	lsls	r0, r2, #31
 8001c0e:	d404      	bmi.n	8001c1a <_fflush_r+0x3a>
 8001c10:	0599      	lsls	r1, r3, #22
 8001c12:	d402      	bmi.n	8001c1a <_fflush_r+0x3a>
 8001c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c16:	f000 f915 	bl	8001e44 <__retarget_lock_acquire_recursive>
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	f7ff ff5d 	bl	8001adc <__sflush_r>
 8001c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c24:	4605      	mov	r5, r0
 8001c26:	07da      	lsls	r2, r3, #31
 8001c28:	d4e0      	bmi.n	8001bec <_fflush_r+0xc>
 8001c2a:	89a3      	ldrh	r3, [r4, #12]
 8001c2c:	059b      	lsls	r3, r3, #22
 8001c2e:	d4dd      	bmi.n	8001bec <_fflush_r+0xc>
 8001c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c32:	f000 f908 	bl	8001e46 <__retarget_lock_release_recursive>
 8001c36:	e7d9      	b.n	8001bec <_fflush_r+0xc>
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <_fflush_r+0x70>)
 8001c3a:	429c      	cmp	r4, r3
 8001c3c:	d101      	bne.n	8001c42 <_fflush_r+0x62>
 8001c3e:	68ac      	ldr	r4, [r5, #8]
 8001c40:	e7df      	b.n	8001c02 <_fflush_r+0x22>
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <_fflush_r+0x74>)
 8001c44:	429c      	cmp	r4, r3
 8001c46:	bf08      	it	eq
 8001c48:	68ec      	ldreq	r4, [r5, #12]
 8001c4a:	e7da      	b.n	8001c02 <_fflush_r+0x22>
 8001c4c:	08002aa0 	.word	0x08002aa0
 8001c50:	08002ac0 	.word	0x08002ac0
 8001c54:	08002a80 	.word	0x08002a80

08001c58 <std>:
 8001c58:	2300      	movs	r3, #0
 8001c5a:	b510      	push	{r4, lr}
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8001c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c66:	6083      	str	r3, [r0, #8]
 8001c68:	8181      	strh	r1, [r0, #12]
 8001c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8001c6c:	81c2      	strh	r2, [r0, #14]
 8001c6e:	6183      	str	r3, [r0, #24]
 8001c70:	4619      	mov	r1, r3
 8001c72:	2208      	movs	r2, #8
 8001c74:	305c      	adds	r0, #92	; 0x5c
 8001c76:	f7ff fddb 	bl	8001830 <memset>
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <std+0x38>)
 8001c7c:	6224      	str	r4, [r4, #32]
 8001c7e:	6263      	str	r3, [r4, #36]	; 0x24
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <std+0x3c>)
 8001c82:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <std+0x40>)
 8001c86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <std+0x44>)
 8001c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8001c8c:	bd10      	pop	{r4, pc}
 8001c8e:	bf00      	nop
 8001c90:	080026c9 	.word	0x080026c9
 8001c94:	080026eb 	.word	0x080026eb
 8001c98:	08002723 	.word	0x08002723
 8001c9c:	08002747 	.word	0x08002747

08001ca0 <_cleanup_r>:
 8001ca0:	4901      	ldr	r1, [pc, #4]	; (8001ca8 <_cleanup_r+0x8>)
 8001ca2:	f000 b8af 	b.w	8001e04 <_fwalk_reent>
 8001ca6:	bf00      	nop
 8001ca8:	08001be1 	.word	0x08001be1

08001cac <__sfmoreglue>:
 8001cac:	2268      	movs	r2, #104	; 0x68
 8001cae:	b570      	push	{r4, r5, r6, lr}
 8001cb0:	1e4d      	subs	r5, r1, #1
 8001cb2:	4355      	muls	r5, r2
 8001cb4:	460e      	mov	r6, r1
 8001cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001cba:	f000 f993 	bl	8001fe4 <_malloc_r>
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	b140      	cbz	r0, 8001cd4 <__sfmoreglue+0x28>
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8001cc8:	300c      	adds	r0, #12
 8001cca:	60a0      	str	r0, [r4, #8]
 8001ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001cd0:	f7ff fdae 	bl	8001830 <memset>
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}

08001cd8 <__sfp_lock_acquire>:
 8001cd8:	4801      	ldr	r0, [pc, #4]	; (8001ce0 <__sfp_lock_acquire+0x8>)
 8001cda:	f000 b8b3 	b.w	8001e44 <__retarget_lock_acquire_recursive>
 8001cde:	bf00      	nop
 8001ce0:	20000149 	.word	0x20000149

08001ce4 <__sfp_lock_release>:
 8001ce4:	4801      	ldr	r0, [pc, #4]	; (8001cec <__sfp_lock_release+0x8>)
 8001ce6:	f000 b8ae 	b.w	8001e46 <__retarget_lock_release_recursive>
 8001cea:	bf00      	nop
 8001cec:	20000149 	.word	0x20000149

08001cf0 <__sinit_lock_acquire>:
 8001cf0:	4801      	ldr	r0, [pc, #4]	; (8001cf8 <__sinit_lock_acquire+0x8>)
 8001cf2:	f000 b8a7 	b.w	8001e44 <__retarget_lock_acquire_recursive>
 8001cf6:	bf00      	nop
 8001cf8:	2000014a 	.word	0x2000014a

08001cfc <__sinit_lock_release>:
 8001cfc:	4801      	ldr	r0, [pc, #4]	; (8001d04 <__sinit_lock_release+0x8>)
 8001cfe:	f000 b8a2 	b.w	8001e46 <__retarget_lock_release_recursive>
 8001d02:	bf00      	nop
 8001d04:	2000014a 	.word	0x2000014a

08001d08 <__sinit>:
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	f7ff fff0 	bl	8001cf0 <__sinit_lock_acquire>
 8001d10:	69a3      	ldr	r3, [r4, #24]
 8001d12:	b11b      	cbz	r3, 8001d1c <__sinit+0x14>
 8001d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d18:	f7ff bff0 	b.w	8001cfc <__sinit_lock_release>
 8001d1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001d20:	6523      	str	r3, [r4, #80]	; 0x50
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <__sinit+0x68>)
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <__sinit+0x6c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	62a2      	str	r2, [r4, #40]	; 0x28
 8001d2a:	42a3      	cmp	r3, r4
 8001d2c:	bf08      	it	eq
 8001d2e:	2301      	moveq	r3, #1
 8001d30:	4620      	mov	r0, r4
 8001d32:	bf08      	it	eq
 8001d34:	61a3      	streq	r3, [r4, #24]
 8001d36:	f000 f81f 	bl	8001d78 <__sfp>
 8001d3a:	6060      	str	r0, [r4, #4]
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f000 f81b 	bl	8001d78 <__sfp>
 8001d42:	60a0      	str	r0, [r4, #8]
 8001d44:	4620      	mov	r0, r4
 8001d46:	f000 f817 	bl	8001d78 <__sfp>
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	60e0      	str	r0, [r4, #12]
 8001d50:	6860      	ldr	r0, [r4, #4]
 8001d52:	f7ff ff81 	bl	8001c58 <std>
 8001d56:	2201      	movs	r2, #1
 8001d58:	2109      	movs	r1, #9
 8001d5a:	68a0      	ldr	r0, [r4, #8]
 8001d5c:	f7ff ff7c 	bl	8001c58 <std>
 8001d60:	2202      	movs	r2, #2
 8001d62:	2112      	movs	r1, #18
 8001d64:	68e0      	ldr	r0, [r4, #12]
 8001d66:	f7ff ff77 	bl	8001c58 <std>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	61a3      	str	r3, [r4, #24]
 8001d6e:	e7d1      	b.n	8001d14 <__sinit+0xc>
 8001d70:	08002a7c 	.word	0x08002a7c
 8001d74:	08001ca1 	.word	0x08001ca1

08001d78 <__sfp>:
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	4607      	mov	r7, r0
 8001d7c:	f7ff ffac 	bl	8001cd8 <__sfp_lock_acquire>
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <__sfp+0x84>)
 8001d82:	681e      	ldr	r6, [r3, #0]
 8001d84:	69b3      	ldr	r3, [r6, #24]
 8001d86:	b913      	cbnz	r3, 8001d8e <__sfp+0x16>
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f7ff ffbd 	bl	8001d08 <__sinit>
 8001d8e:	3648      	adds	r6, #72	; 0x48
 8001d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	d503      	bpl.n	8001da0 <__sfp+0x28>
 8001d98:	6833      	ldr	r3, [r6, #0]
 8001d9a:	b30b      	cbz	r3, 8001de0 <__sfp+0x68>
 8001d9c:	6836      	ldr	r6, [r6, #0]
 8001d9e:	e7f7      	b.n	8001d90 <__sfp+0x18>
 8001da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001da4:	b9d5      	cbnz	r5, 8001ddc <__sfp+0x64>
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <__sfp+0x88>)
 8001da8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001dac:	60e3      	str	r3, [r4, #12]
 8001dae:	6665      	str	r5, [r4, #100]	; 0x64
 8001db0:	f000 f847 	bl	8001e42 <__retarget_lock_init_recursive>
 8001db4:	f7ff ff96 	bl	8001ce4 <__sfp_lock_release>
 8001db8:	2208      	movs	r2, #8
 8001dba:	4629      	mov	r1, r5
 8001dbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001dc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001dc4:	6025      	str	r5, [r4, #0]
 8001dc6:	61a5      	str	r5, [r4, #24]
 8001dc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001dcc:	f7ff fd30 	bl	8001830 <memset>
 8001dd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001dd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001dd8:	4620      	mov	r0, r4
 8001dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ddc:	3468      	adds	r4, #104	; 0x68
 8001dde:	e7d9      	b.n	8001d94 <__sfp+0x1c>
 8001de0:	2104      	movs	r1, #4
 8001de2:	4638      	mov	r0, r7
 8001de4:	f7ff ff62 	bl	8001cac <__sfmoreglue>
 8001de8:	4604      	mov	r4, r0
 8001dea:	6030      	str	r0, [r6, #0]
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d1d5      	bne.n	8001d9c <__sfp+0x24>
 8001df0:	f7ff ff78 	bl	8001ce4 <__sfp_lock_release>
 8001df4:	230c      	movs	r3, #12
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	e7ee      	b.n	8001dd8 <__sfp+0x60>
 8001dfa:	bf00      	nop
 8001dfc:	08002a7c 	.word	0x08002a7c
 8001e00:	ffff0001 	.word	0xffff0001

08001e04 <_fwalk_reent>:
 8001e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e08:	4606      	mov	r6, r0
 8001e0a:	4688      	mov	r8, r1
 8001e0c:	2700      	movs	r7, #0
 8001e0e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e16:	f1b9 0901 	subs.w	r9, r9, #1
 8001e1a:	d505      	bpl.n	8001e28 <_fwalk_reent+0x24>
 8001e1c:	6824      	ldr	r4, [r4, #0]
 8001e1e:	2c00      	cmp	r4, #0
 8001e20:	d1f7      	bne.n	8001e12 <_fwalk_reent+0xe>
 8001e22:	4638      	mov	r0, r7
 8001e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e28:	89ab      	ldrh	r3, [r5, #12]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d907      	bls.n	8001e3e <_fwalk_reent+0x3a>
 8001e2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e32:	3301      	adds	r3, #1
 8001e34:	d003      	beq.n	8001e3e <_fwalk_reent+0x3a>
 8001e36:	4629      	mov	r1, r5
 8001e38:	4630      	mov	r0, r6
 8001e3a:	47c0      	blx	r8
 8001e3c:	4307      	orrs	r7, r0
 8001e3e:	3568      	adds	r5, #104	; 0x68
 8001e40:	e7e9      	b.n	8001e16 <_fwalk_reent+0x12>

08001e42 <__retarget_lock_init_recursive>:
 8001e42:	4770      	bx	lr

08001e44 <__retarget_lock_acquire_recursive>:
 8001e44:	4770      	bx	lr

08001e46 <__retarget_lock_release_recursive>:
 8001e46:	4770      	bx	lr

08001e48 <__swhatbuf_r>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	460e      	mov	r6, r1
 8001e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e50:	4614      	mov	r4, r2
 8001e52:	2900      	cmp	r1, #0
 8001e54:	461d      	mov	r5, r3
 8001e56:	b096      	sub	sp, #88	; 0x58
 8001e58:	da08      	bge.n	8001e6c <__swhatbuf_r+0x24>
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001e60:	602a      	str	r2, [r5, #0]
 8001e62:	061a      	lsls	r2, r3, #24
 8001e64:	d410      	bmi.n	8001e88 <__swhatbuf_r+0x40>
 8001e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6a:	e00e      	b.n	8001e8a <__swhatbuf_r+0x42>
 8001e6c:	466a      	mov	r2, sp
 8001e6e:	f000 fc91 	bl	8002794 <_fstat_r>
 8001e72:	2800      	cmp	r0, #0
 8001e74:	dbf1      	blt.n	8001e5a <__swhatbuf_r+0x12>
 8001e76:	9a01      	ldr	r2, [sp, #4]
 8001e78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e80:	425a      	negs	r2, r3
 8001e82:	415a      	adcs	r2, r3
 8001e84:	602a      	str	r2, [r5, #0]
 8001e86:	e7ee      	b.n	8001e66 <__swhatbuf_r+0x1e>
 8001e88:	2340      	movs	r3, #64	; 0x40
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	6023      	str	r3, [r4, #0]
 8001e8e:	b016      	add	sp, #88	; 0x58
 8001e90:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e94 <__smakebuf_r>:
 8001e94:	898b      	ldrh	r3, [r1, #12]
 8001e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e98:	079d      	lsls	r5, r3, #30
 8001e9a:	4606      	mov	r6, r0
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	d507      	bpl.n	8001eb0 <__smakebuf_r+0x1c>
 8001ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ea4:	6023      	str	r3, [r4, #0]
 8001ea6:	6123      	str	r3, [r4, #16]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	6163      	str	r3, [r4, #20]
 8001eac:	b002      	add	sp, #8
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
 8001eb0:	466a      	mov	r2, sp
 8001eb2:	ab01      	add	r3, sp, #4
 8001eb4:	f7ff ffc8 	bl	8001e48 <__swhatbuf_r>
 8001eb8:	9900      	ldr	r1, [sp, #0]
 8001eba:	4605      	mov	r5, r0
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f000 f891 	bl	8001fe4 <_malloc_r>
 8001ec2:	b948      	cbnz	r0, 8001ed8 <__smakebuf_r+0x44>
 8001ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ec8:	059a      	lsls	r2, r3, #22
 8001eca:	d4ef      	bmi.n	8001eac <__smakebuf_r+0x18>
 8001ecc:	f023 0303 	bic.w	r3, r3, #3
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	81a3      	strh	r3, [r4, #12]
 8001ed6:	e7e3      	b.n	8001ea0 <__smakebuf_r+0xc>
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <__smakebuf_r+0x7c>)
 8001eda:	62b3      	str	r3, [r6, #40]	; 0x28
 8001edc:	89a3      	ldrh	r3, [r4, #12]
 8001ede:	6020      	str	r0, [r4, #0]
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee4:	81a3      	strh	r3, [r4, #12]
 8001ee6:	9b00      	ldr	r3, [sp, #0]
 8001ee8:	6120      	str	r0, [r4, #16]
 8001eea:	6163      	str	r3, [r4, #20]
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	b15b      	cbz	r3, 8001f08 <__smakebuf_r+0x74>
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ef6:	f000 fc5f 	bl	80027b8 <_isatty_r>
 8001efa:	b128      	cbz	r0, 8001f08 <__smakebuf_r+0x74>
 8001efc:	89a3      	ldrh	r3, [r4, #12]
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	81a3      	strh	r3, [r4, #12]
 8001f08:	89a0      	ldrh	r0, [r4, #12]
 8001f0a:	4305      	orrs	r5, r0
 8001f0c:	81a5      	strh	r5, [r4, #12]
 8001f0e:	e7cd      	b.n	8001eac <__smakebuf_r+0x18>
 8001f10:	08001ca1 	.word	0x08001ca1

08001f14 <_free_r>:
 8001f14:	b538      	push	{r3, r4, r5, lr}
 8001f16:	4605      	mov	r5, r0
 8001f18:	2900      	cmp	r1, #0
 8001f1a:	d040      	beq.n	8001f9e <_free_r+0x8a>
 8001f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f20:	1f0c      	subs	r4, r1, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bfb8      	it	lt
 8001f26:	18e4      	addlt	r4, r4, r3
 8001f28:	f000 fc76 	bl	8002818 <__malloc_lock>
 8001f2c:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <_free_r+0x8c>)
 8001f2e:	6813      	ldr	r3, [r2, #0]
 8001f30:	b933      	cbnz	r3, 8001f40 <_free_r+0x2c>
 8001f32:	6063      	str	r3, [r4, #4]
 8001f34:	6014      	str	r4, [r2, #0]
 8001f36:	4628      	mov	r0, r5
 8001f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f3c:	f000 bc72 	b.w	8002824 <__malloc_unlock>
 8001f40:	42a3      	cmp	r3, r4
 8001f42:	d908      	bls.n	8001f56 <_free_r+0x42>
 8001f44:	6820      	ldr	r0, [r4, #0]
 8001f46:	1821      	adds	r1, r4, r0
 8001f48:	428b      	cmp	r3, r1
 8001f4a:	bf01      	itttt	eq
 8001f4c:	6819      	ldreq	r1, [r3, #0]
 8001f4e:	685b      	ldreq	r3, [r3, #4]
 8001f50:	1809      	addeq	r1, r1, r0
 8001f52:	6021      	streq	r1, [r4, #0]
 8001f54:	e7ed      	b.n	8001f32 <_free_r+0x1e>
 8001f56:	461a      	mov	r2, r3
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	b10b      	cbz	r3, 8001f60 <_free_r+0x4c>
 8001f5c:	42a3      	cmp	r3, r4
 8001f5e:	d9fa      	bls.n	8001f56 <_free_r+0x42>
 8001f60:	6811      	ldr	r1, [r2, #0]
 8001f62:	1850      	adds	r0, r2, r1
 8001f64:	42a0      	cmp	r0, r4
 8001f66:	d10b      	bne.n	8001f80 <_free_r+0x6c>
 8001f68:	6820      	ldr	r0, [r4, #0]
 8001f6a:	4401      	add	r1, r0
 8001f6c:	1850      	adds	r0, r2, r1
 8001f6e:	4283      	cmp	r3, r0
 8001f70:	6011      	str	r1, [r2, #0]
 8001f72:	d1e0      	bne.n	8001f36 <_free_r+0x22>
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4401      	add	r1, r0
 8001f7a:	6011      	str	r1, [r2, #0]
 8001f7c:	6053      	str	r3, [r2, #4]
 8001f7e:	e7da      	b.n	8001f36 <_free_r+0x22>
 8001f80:	d902      	bls.n	8001f88 <_free_r+0x74>
 8001f82:	230c      	movs	r3, #12
 8001f84:	602b      	str	r3, [r5, #0]
 8001f86:	e7d6      	b.n	8001f36 <_free_r+0x22>
 8001f88:	6820      	ldr	r0, [r4, #0]
 8001f8a:	1821      	adds	r1, r4, r0
 8001f8c:	428b      	cmp	r3, r1
 8001f8e:	bf01      	itttt	eq
 8001f90:	6819      	ldreq	r1, [r3, #0]
 8001f92:	685b      	ldreq	r3, [r3, #4]
 8001f94:	1809      	addeq	r1, r1, r0
 8001f96:	6021      	streq	r1, [r4, #0]
 8001f98:	6063      	str	r3, [r4, #4]
 8001f9a:	6054      	str	r4, [r2, #4]
 8001f9c:	e7cb      	b.n	8001f36 <_free_r+0x22>
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
 8001fa0:	2000014c 	.word	0x2000014c

08001fa4 <sbrk_aligned>:
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	4e0e      	ldr	r6, [pc, #56]	; (8001fe0 <sbrk_aligned+0x3c>)
 8001fa8:	460c      	mov	r4, r1
 8001faa:	6831      	ldr	r1, [r6, #0]
 8001fac:	4605      	mov	r5, r0
 8001fae:	b911      	cbnz	r1, 8001fb6 <sbrk_aligned+0x12>
 8001fb0:	f000 fb7a 	bl	80026a8 <_sbrk_r>
 8001fb4:	6030      	str	r0, [r6, #0]
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f000 fb75 	bl	80026a8 <_sbrk_r>
 8001fbe:	1c43      	adds	r3, r0, #1
 8001fc0:	d00a      	beq.n	8001fd8 <sbrk_aligned+0x34>
 8001fc2:	1cc4      	adds	r4, r0, #3
 8001fc4:	f024 0403 	bic.w	r4, r4, #3
 8001fc8:	42a0      	cmp	r0, r4
 8001fca:	d007      	beq.n	8001fdc <sbrk_aligned+0x38>
 8001fcc:	1a21      	subs	r1, r4, r0
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f000 fb6a 	bl	80026a8 <_sbrk_r>
 8001fd4:	3001      	adds	r0, #1
 8001fd6:	d101      	bne.n	8001fdc <sbrk_aligned+0x38>
 8001fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8001fdc:	4620      	mov	r0, r4
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
 8001fe0:	20000150 	.word	0x20000150

08001fe4 <_malloc_r>:
 8001fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe8:	1ccd      	adds	r5, r1, #3
 8001fea:	f025 0503 	bic.w	r5, r5, #3
 8001fee:	3508      	adds	r5, #8
 8001ff0:	2d0c      	cmp	r5, #12
 8001ff2:	bf38      	it	cc
 8001ff4:	250c      	movcc	r5, #12
 8001ff6:	2d00      	cmp	r5, #0
 8001ff8:	4607      	mov	r7, r0
 8001ffa:	db01      	blt.n	8002000 <_malloc_r+0x1c>
 8001ffc:	42a9      	cmp	r1, r5
 8001ffe:	d905      	bls.n	800200c <_malloc_r+0x28>
 8002000:	230c      	movs	r3, #12
 8002002:	2600      	movs	r6, #0
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4630      	mov	r0, r6
 8002008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800200c:	4e2e      	ldr	r6, [pc, #184]	; (80020c8 <_malloc_r+0xe4>)
 800200e:	f000 fc03 	bl	8002818 <__malloc_lock>
 8002012:	6833      	ldr	r3, [r6, #0]
 8002014:	461c      	mov	r4, r3
 8002016:	bb34      	cbnz	r4, 8002066 <_malloc_r+0x82>
 8002018:	4629      	mov	r1, r5
 800201a:	4638      	mov	r0, r7
 800201c:	f7ff ffc2 	bl	8001fa4 <sbrk_aligned>
 8002020:	1c43      	adds	r3, r0, #1
 8002022:	4604      	mov	r4, r0
 8002024:	d14d      	bne.n	80020c2 <_malloc_r+0xde>
 8002026:	6834      	ldr	r4, [r6, #0]
 8002028:	4626      	mov	r6, r4
 800202a:	2e00      	cmp	r6, #0
 800202c:	d140      	bne.n	80020b0 <_malloc_r+0xcc>
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	4631      	mov	r1, r6
 8002032:	4638      	mov	r0, r7
 8002034:	eb04 0803 	add.w	r8, r4, r3
 8002038:	f000 fb36 	bl	80026a8 <_sbrk_r>
 800203c:	4580      	cmp	r8, r0
 800203e:	d13a      	bne.n	80020b6 <_malloc_r+0xd2>
 8002040:	6821      	ldr	r1, [r4, #0]
 8002042:	3503      	adds	r5, #3
 8002044:	1a6d      	subs	r5, r5, r1
 8002046:	f025 0503 	bic.w	r5, r5, #3
 800204a:	3508      	adds	r5, #8
 800204c:	2d0c      	cmp	r5, #12
 800204e:	bf38      	it	cc
 8002050:	250c      	movcc	r5, #12
 8002052:	4638      	mov	r0, r7
 8002054:	4629      	mov	r1, r5
 8002056:	f7ff ffa5 	bl	8001fa4 <sbrk_aligned>
 800205a:	3001      	adds	r0, #1
 800205c:	d02b      	beq.n	80020b6 <_malloc_r+0xd2>
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	442b      	add	r3, r5
 8002062:	6023      	str	r3, [r4, #0]
 8002064:	e00e      	b.n	8002084 <_malloc_r+0xa0>
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	1b52      	subs	r2, r2, r5
 800206a:	d41e      	bmi.n	80020aa <_malloc_r+0xc6>
 800206c:	2a0b      	cmp	r2, #11
 800206e:	d916      	bls.n	800209e <_malloc_r+0xba>
 8002070:	1961      	adds	r1, r4, r5
 8002072:	42a3      	cmp	r3, r4
 8002074:	6025      	str	r5, [r4, #0]
 8002076:	bf18      	it	ne
 8002078:	6059      	strne	r1, [r3, #4]
 800207a:	6863      	ldr	r3, [r4, #4]
 800207c:	bf08      	it	eq
 800207e:	6031      	streq	r1, [r6, #0]
 8002080:	5162      	str	r2, [r4, r5]
 8002082:	604b      	str	r3, [r1, #4]
 8002084:	4638      	mov	r0, r7
 8002086:	f104 060b 	add.w	r6, r4, #11
 800208a:	f000 fbcb 	bl	8002824 <__malloc_unlock>
 800208e:	f026 0607 	bic.w	r6, r6, #7
 8002092:	1d23      	adds	r3, r4, #4
 8002094:	1af2      	subs	r2, r6, r3
 8002096:	d0b6      	beq.n	8002006 <_malloc_r+0x22>
 8002098:	1b9b      	subs	r3, r3, r6
 800209a:	50a3      	str	r3, [r4, r2]
 800209c:	e7b3      	b.n	8002006 <_malloc_r+0x22>
 800209e:	6862      	ldr	r2, [r4, #4]
 80020a0:	42a3      	cmp	r3, r4
 80020a2:	bf0c      	ite	eq
 80020a4:	6032      	streq	r2, [r6, #0]
 80020a6:	605a      	strne	r2, [r3, #4]
 80020a8:	e7ec      	b.n	8002084 <_malloc_r+0xa0>
 80020aa:	4623      	mov	r3, r4
 80020ac:	6864      	ldr	r4, [r4, #4]
 80020ae:	e7b2      	b.n	8002016 <_malloc_r+0x32>
 80020b0:	4634      	mov	r4, r6
 80020b2:	6876      	ldr	r6, [r6, #4]
 80020b4:	e7b9      	b.n	800202a <_malloc_r+0x46>
 80020b6:	230c      	movs	r3, #12
 80020b8:	4638      	mov	r0, r7
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	f000 fbb2 	bl	8002824 <__malloc_unlock>
 80020c0:	e7a1      	b.n	8002006 <_malloc_r+0x22>
 80020c2:	6025      	str	r5, [r4, #0]
 80020c4:	e7de      	b.n	8002084 <_malloc_r+0xa0>
 80020c6:	bf00      	nop
 80020c8:	2000014c 	.word	0x2000014c

080020cc <__sfputc_r>:
 80020cc:	6893      	ldr	r3, [r2, #8]
 80020ce:	b410      	push	{r4}
 80020d0:	3b01      	subs	r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	6093      	str	r3, [r2, #8]
 80020d6:	da07      	bge.n	80020e8 <__sfputc_r+0x1c>
 80020d8:	6994      	ldr	r4, [r2, #24]
 80020da:	42a3      	cmp	r3, r4
 80020dc:	db01      	blt.n	80020e2 <__sfputc_r+0x16>
 80020de:	290a      	cmp	r1, #10
 80020e0:	d102      	bne.n	80020e8 <__sfputc_r+0x1c>
 80020e2:	bc10      	pop	{r4}
 80020e4:	f7ff bc3a 	b.w	800195c <__swbuf_r>
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	1c58      	adds	r0, r3, #1
 80020ec:	6010      	str	r0, [r2, #0]
 80020ee:	7019      	strb	r1, [r3, #0]
 80020f0:	4608      	mov	r0, r1
 80020f2:	bc10      	pop	{r4}
 80020f4:	4770      	bx	lr

080020f6 <__sfputs_r>:
 80020f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f8:	4606      	mov	r6, r0
 80020fa:	460f      	mov	r7, r1
 80020fc:	4614      	mov	r4, r2
 80020fe:	18d5      	adds	r5, r2, r3
 8002100:	42ac      	cmp	r4, r5
 8002102:	d101      	bne.n	8002108 <__sfputs_r+0x12>
 8002104:	2000      	movs	r0, #0
 8002106:	e007      	b.n	8002118 <__sfputs_r+0x22>
 8002108:	463a      	mov	r2, r7
 800210a:	4630      	mov	r0, r6
 800210c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002110:	f7ff ffdc 	bl	80020cc <__sfputc_r>
 8002114:	1c43      	adds	r3, r0, #1
 8002116:	d1f3      	bne.n	8002100 <__sfputs_r+0xa>
 8002118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800211c <_vfiprintf_r>:
 800211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002120:	460d      	mov	r5, r1
 8002122:	4614      	mov	r4, r2
 8002124:	4698      	mov	r8, r3
 8002126:	4606      	mov	r6, r0
 8002128:	b09d      	sub	sp, #116	; 0x74
 800212a:	b118      	cbz	r0, 8002134 <_vfiprintf_r+0x18>
 800212c:	6983      	ldr	r3, [r0, #24]
 800212e:	b90b      	cbnz	r3, 8002134 <_vfiprintf_r+0x18>
 8002130:	f7ff fdea 	bl	8001d08 <__sinit>
 8002134:	4b89      	ldr	r3, [pc, #548]	; (800235c <_vfiprintf_r+0x240>)
 8002136:	429d      	cmp	r5, r3
 8002138:	d11b      	bne.n	8002172 <_vfiprintf_r+0x56>
 800213a:	6875      	ldr	r5, [r6, #4]
 800213c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800213e:	07d9      	lsls	r1, r3, #31
 8002140:	d405      	bmi.n	800214e <_vfiprintf_r+0x32>
 8002142:	89ab      	ldrh	r3, [r5, #12]
 8002144:	059a      	lsls	r2, r3, #22
 8002146:	d402      	bmi.n	800214e <_vfiprintf_r+0x32>
 8002148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800214a:	f7ff fe7b 	bl	8001e44 <__retarget_lock_acquire_recursive>
 800214e:	89ab      	ldrh	r3, [r5, #12]
 8002150:	071b      	lsls	r3, r3, #28
 8002152:	d501      	bpl.n	8002158 <_vfiprintf_r+0x3c>
 8002154:	692b      	ldr	r3, [r5, #16]
 8002156:	b9eb      	cbnz	r3, 8002194 <_vfiprintf_r+0x78>
 8002158:	4629      	mov	r1, r5
 800215a:	4630      	mov	r0, r6
 800215c:	f7ff fc50 	bl	8001a00 <__swsetup_r>
 8002160:	b1c0      	cbz	r0, 8002194 <_vfiprintf_r+0x78>
 8002162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002164:	07dc      	lsls	r4, r3, #31
 8002166:	d50e      	bpl.n	8002186 <_vfiprintf_r+0x6a>
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	b01d      	add	sp, #116	; 0x74
 800216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002172:	4b7b      	ldr	r3, [pc, #492]	; (8002360 <_vfiprintf_r+0x244>)
 8002174:	429d      	cmp	r5, r3
 8002176:	d101      	bne.n	800217c <_vfiprintf_r+0x60>
 8002178:	68b5      	ldr	r5, [r6, #8]
 800217a:	e7df      	b.n	800213c <_vfiprintf_r+0x20>
 800217c:	4b79      	ldr	r3, [pc, #484]	; (8002364 <_vfiprintf_r+0x248>)
 800217e:	429d      	cmp	r5, r3
 8002180:	bf08      	it	eq
 8002182:	68f5      	ldreq	r5, [r6, #12]
 8002184:	e7da      	b.n	800213c <_vfiprintf_r+0x20>
 8002186:	89ab      	ldrh	r3, [r5, #12]
 8002188:	0598      	lsls	r0, r3, #22
 800218a:	d4ed      	bmi.n	8002168 <_vfiprintf_r+0x4c>
 800218c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800218e:	f7ff fe5a 	bl	8001e46 <__retarget_lock_release_recursive>
 8002192:	e7e9      	b.n	8002168 <_vfiprintf_r+0x4c>
 8002194:	2300      	movs	r3, #0
 8002196:	9309      	str	r3, [sp, #36]	; 0x24
 8002198:	2320      	movs	r3, #32
 800219a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800219e:	2330      	movs	r3, #48	; 0x30
 80021a0:	f04f 0901 	mov.w	r9, #1
 80021a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80021a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002368 <_vfiprintf_r+0x24c>
 80021ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021b0:	4623      	mov	r3, r4
 80021b2:	469a      	mov	sl, r3
 80021b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021b8:	b10a      	cbz	r2, 80021be <_vfiprintf_r+0xa2>
 80021ba:	2a25      	cmp	r2, #37	; 0x25
 80021bc:	d1f9      	bne.n	80021b2 <_vfiprintf_r+0x96>
 80021be:	ebba 0b04 	subs.w	fp, sl, r4
 80021c2:	d00b      	beq.n	80021dc <_vfiprintf_r+0xc0>
 80021c4:	465b      	mov	r3, fp
 80021c6:	4622      	mov	r2, r4
 80021c8:	4629      	mov	r1, r5
 80021ca:	4630      	mov	r0, r6
 80021cc:	f7ff ff93 	bl	80020f6 <__sfputs_r>
 80021d0:	3001      	adds	r0, #1
 80021d2:	f000 80aa 	beq.w	800232a <_vfiprintf_r+0x20e>
 80021d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021d8:	445a      	add	r2, fp
 80021da:	9209      	str	r2, [sp, #36]	; 0x24
 80021dc:	f89a 3000 	ldrb.w	r3, [sl]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a2 	beq.w	800232a <_vfiprintf_r+0x20e>
 80021e6:	2300      	movs	r3, #0
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021f0:	f10a 0a01 	add.w	sl, sl, #1
 80021f4:	9304      	str	r3, [sp, #16]
 80021f6:	9307      	str	r3, [sp, #28]
 80021f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021fc:	931a      	str	r3, [sp, #104]	; 0x68
 80021fe:	4654      	mov	r4, sl
 8002200:	2205      	movs	r2, #5
 8002202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002206:	4858      	ldr	r0, [pc, #352]	; (8002368 <_vfiprintf_r+0x24c>)
 8002208:	f000 faf8 	bl	80027fc <memchr>
 800220c:	9a04      	ldr	r2, [sp, #16]
 800220e:	b9d8      	cbnz	r0, 8002248 <_vfiprintf_r+0x12c>
 8002210:	06d1      	lsls	r1, r2, #27
 8002212:	bf44      	itt	mi
 8002214:	2320      	movmi	r3, #32
 8002216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800221a:	0713      	lsls	r3, r2, #28
 800221c:	bf44      	itt	mi
 800221e:	232b      	movmi	r3, #43	; 0x2b
 8002220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002224:	f89a 3000 	ldrb.w	r3, [sl]
 8002228:	2b2a      	cmp	r3, #42	; 0x2a
 800222a:	d015      	beq.n	8002258 <_vfiprintf_r+0x13c>
 800222c:	4654      	mov	r4, sl
 800222e:	2000      	movs	r0, #0
 8002230:	f04f 0c0a 	mov.w	ip, #10
 8002234:	9a07      	ldr	r2, [sp, #28]
 8002236:	4621      	mov	r1, r4
 8002238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800223c:	3b30      	subs	r3, #48	; 0x30
 800223e:	2b09      	cmp	r3, #9
 8002240:	d94e      	bls.n	80022e0 <_vfiprintf_r+0x1c4>
 8002242:	b1b0      	cbz	r0, 8002272 <_vfiprintf_r+0x156>
 8002244:	9207      	str	r2, [sp, #28]
 8002246:	e014      	b.n	8002272 <_vfiprintf_r+0x156>
 8002248:	eba0 0308 	sub.w	r3, r0, r8
 800224c:	fa09 f303 	lsl.w	r3, r9, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	46a2      	mov	sl, r4
 8002254:	9304      	str	r3, [sp, #16]
 8002256:	e7d2      	b.n	80021fe <_vfiprintf_r+0xe2>
 8002258:	9b03      	ldr	r3, [sp, #12]
 800225a:	1d19      	adds	r1, r3, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	9103      	str	r1, [sp, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	bfbb      	ittet	lt
 8002264:	425b      	neglt	r3, r3
 8002266:	f042 0202 	orrlt.w	r2, r2, #2
 800226a:	9307      	strge	r3, [sp, #28]
 800226c:	9307      	strlt	r3, [sp, #28]
 800226e:	bfb8      	it	lt
 8002270:	9204      	strlt	r2, [sp, #16]
 8002272:	7823      	ldrb	r3, [r4, #0]
 8002274:	2b2e      	cmp	r3, #46	; 0x2e
 8002276:	d10c      	bne.n	8002292 <_vfiprintf_r+0x176>
 8002278:	7863      	ldrb	r3, [r4, #1]
 800227a:	2b2a      	cmp	r3, #42	; 0x2a
 800227c:	d135      	bne.n	80022ea <_vfiprintf_r+0x1ce>
 800227e:	9b03      	ldr	r3, [sp, #12]
 8002280:	3402      	adds	r4, #2
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	9203      	str	r2, [sp, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	bfb8      	it	lt
 800228c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002290:	9305      	str	r3, [sp, #20]
 8002292:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800236c <_vfiprintf_r+0x250>
 8002296:	2203      	movs	r2, #3
 8002298:	4650      	mov	r0, sl
 800229a:	7821      	ldrb	r1, [r4, #0]
 800229c:	f000 faae 	bl	80027fc <memchr>
 80022a0:	b140      	cbz	r0, 80022b4 <_vfiprintf_r+0x198>
 80022a2:	2340      	movs	r3, #64	; 0x40
 80022a4:	eba0 000a 	sub.w	r0, r0, sl
 80022a8:	fa03 f000 	lsl.w	r0, r3, r0
 80022ac:	9b04      	ldr	r3, [sp, #16]
 80022ae:	3401      	adds	r4, #1
 80022b0:	4303      	orrs	r3, r0
 80022b2:	9304      	str	r3, [sp, #16]
 80022b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022b8:	2206      	movs	r2, #6
 80022ba:	482d      	ldr	r0, [pc, #180]	; (8002370 <_vfiprintf_r+0x254>)
 80022bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022c0:	f000 fa9c 	bl	80027fc <memchr>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d03f      	beq.n	8002348 <_vfiprintf_r+0x22c>
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <_vfiprintf_r+0x258>)
 80022ca:	bb1b      	cbnz	r3, 8002314 <_vfiprintf_r+0x1f8>
 80022cc:	9b03      	ldr	r3, [sp, #12]
 80022ce:	3307      	adds	r3, #7
 80022d0:	f023 0307 	bic.w	r3, r3, #7
 80022d4:	3308      	adds	r3, #8
 80022d6:	9303      	str	r3, [sp, #12]
 80022d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022da:	443b      	add	r3, r7
 80022dc:	9309      	str	r3, [sp, #36]	; 0x24
 80022de:	e767      	b.n	80021b0 <_vfiprintf_r+0x94>
 80022e0:	460c      	mov	r4, r1
 80022e2:	2001      	movs	r0, #1
 80022e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80022e8:	e7a5      	b.n	8002236 <_vfiprintf_r+0x11a>
 80022ea:	2300      	movs	r3, #0
 80022ec:	f04f 0c0a 	mov.w	ip, #10
 80022f0:	4619      	mov	r1, r3
 80022f2:	3401      	adds	r4, #1
 80022f4:	9305      	str	r3, [sp, #20]
 80022f6:	4620      	mov	r0, r4
 80022f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022fc:	3a30      	subs	r2, #48	; 0x30
 80022fe:	2a09      	cmp	r2, #9
 8002300:	d903      	bls.n	800230a <_vfiprintf_r+0x1ee>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0c5      	beq.n	8002292 <_vfiprintf_r+0x176>
 8002306:	9105      	str	r1, [sp, #20]
 8002308:	e7c3      	b.n	8002292 <_vfiprintf_r+0x176>
 800230a:	4604      	mov	r4, r0
 800230c:	2301      	movs	r3, #1
 800230e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002312:	e7f0      	b.n	80022f6 <_vfiprintf_r+0x1da>
 8002314:	ab03      	add	r3, sp, #12
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	462a      	mov	r2, r5
 800231a:	4630      	mov	r0, r6
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <_vfiprintf_r+0x25c>)
 800231e:	a904      	add	r1, sp, #16
 8002320:	f3af 8000 	nop.w
 8002324:	4607      	mov	r7, r0
 8002326:	1c78      	adds	r0, r7, #1
 8002328:	d1d6      	bne.n	80022d8 <_vfiprintf_r+0x1bc>
 800232a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800232c:	07d9      	lsls	r1, r3, #31
 800232e:	d405      	bmi.n	800233c <_vfiprintf_r+0x220>
 8002330:	89ab      	ldrh	r3, [r5, #12]
 8002332:	059a      	lsls	r2, r3, #22
 8002334:	d402      	bmi.n	800233c <_vfiprintf_r+0x220>
 8002336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002338:	f7ff fd85 	bl	8001e46 <__retarget_lock_release_recursive>
 800233c:	89ab      	ldrh	r3, [r5, #12]
 800233e:	065b      	lsls	r3, r3, #25
 8002340:	f53f af12 	bmi.w	8002168 <_vfiprintf_r+0x4c>
 8002344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002346:	e711      	b.n	800216c <_vfiprintf_r+0x50>
 8002348:	ab03      	add	r3, sp, #12
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	462a      	mov	r2, r5
 800234e:	4630      	mov	r0, r6
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <_vfiprintf_r+0x25c>)
 8002352:	a904      	add	r1, sp, #16
 8002354:	f000 f882 	bl	800245c <_printf_i>
 8002358:	e7e4      	b.n	8002324 <_vfiprintf_r+0x208>
 800235a:	bf00      	nop
 800235c:	08002aa0 	.word	0x08002aa0
 8002360:	08002ac0 	.word	0x08002ac0
 8002364:	08002a80 	.word	0x08002a80
 8002368:	08002ae0 	.word	0x08002ae0
 800236c:	08002ae6 	.word	0x08002ae6
 8002370:	08002aea 	.word	0x08002aea
 8002374:	00000000 	.word	0x00000000
 8002378:	080020f7 	.word	0x080020f7

0800237c <_printf_common>:
 800237c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002380:	4616      	mov	r6, r2
 8002382:	4699      	mov	r9, r3
 8002384:	688a      	ldr	r2, [r1, #8]
 8002386:	690b      	ldr	r3, [r1, #16]
 8002388:	4607      	mov	r7, r0
 800238a:	4293      	cmp	r3, r2
 800238c:	bfb8      	it	lt
 800238e:	4613      	movlt	r3, r2
 8002390:	6033      	str	r3, [r6, #0]
 8002392:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002396:	460c      	mov	r4, r1
 8002398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800239c:	b10a      	cbz	r2, 80023a2 <_printf_common+0x26>
 800239e:	3301      	adds	r3, #1
 80023a0:	6033      	str	r3, [r6, #0]
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	0699      	lsls	r1, r3, #26
 80023a6:	bf42      	ittt	mi
 80023a8:	6833      	ldrmi	r3, [r6, #0]
 80023aa:	3302      	addmi	r3, #2
 80023ac:	6033      	strmi	r3, [r6, #0]
 80023ae:	6825      	ldr	r5, [r4, #0]
 80023b0:	f015 0506 	ands.w	r5, r5, #6
 80023b4:	d106      	bne.n	80023c4 <_printf_common+0x48>
 80023b6:	f104 0a19 	add.w	sl, r4, #25
 80023ba:	68e3      	ldr	r3, [r4, #12]
 80023bc:	6832      	ldr	r2, [r6, #0]
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	42ab      	cmp	r3, r5
 80023c2:	dc28      	bgt.n	8002416 <_printf_common+0x9a>
 80023c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023c8:	1e13      	subs	r3, r2, #0
 80023ca:	6822      	ldr	r2, [r4, #0]
 80023cc:	bf18      	it	ne
 80023ce:	2301      	movne	r3, #1
 80023d0:	0692      	lsls	r2, r2, #26
 80023d2:	d42d      	bmi.n	8002430 <_printf_common+0xb4>
 80023d4:	4649      	mov	r1, r9
 80023d6:	4638      	mov	r0, r7
 80023d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023dc:	47c0      	blx	r8
 80023de:	3001      	adds	r0, #1
 80023e0:	d020      	beq.n	8002424 <_printf_common+0xa8>
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	68e5      	ldr	r5, [r4, #12]
 80023e6:	f003 0306 	and.w	r3, r3, #6
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	bf18      	it	ne
 80023ee:	2500      	movne	r5, #0
 80023f0:	6832      	ldr	r2, [r6, #0]
 80023f2:	f04f 0600 	mov.w	r6, #0
 80023f6:	68a3      	ldr	r3, [r4, #8]
 80023f8:	bf08      	it	eq
 80023fa:	1aad      	subeq	r5, r5, r2
 80023fc:	6922      	ldr	r2, [r4, #16]
 80023fe:	bf08      	it	eq
 8002400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002404:	4293      	cmp	r3, r2
 8002406:	bfc4      	itt	gt
 8002408:	1a9b      	subgt	r3, r3, r2
 800240a:	18ed      	addgt	r5, r5, r3
 800240c:	341a      	adds	r4, #26
 800240e:	42b5      	cmp	r5, r6
 8002410:	d11a      	bne.n	8002448 <_printf_common+0xcc>
 8002412:	2000      	movs	r0, #0
 8002414:	e008      	b.n	8002428 <_printf_common+0xac>
 8002416:	2301      	movs	r3, #1
 8002418:	4652      	mov	r2, sl
 800241a:	4649      	mov	r1, r9
 800241c:	4638      	mov	r0, r7
 800241e:	47c0      	blx	r8
 8002420:	3001      	adds	r0, #1
 8002422:	d103      	bne.n	800242c <_printf_common+0xb0>
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800242c:	3501      	adds	r5, #1
 800242e:	e7c4      	b.n	80023ba <_printf_common+0x3e>
 8002430:	2030      	movs	r0, #48	; 0x30
 8002432:	18e1      	adds	r1, r4, r3
 8002434:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800243e:	4422      	add	r2, r4
 8002440:	3302      	adds	r3, #2
 8002442:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002446:	e7c5      	b.n	80023d4 <_printf_common+0x58>
 8002448:	2301      	movs	r3, #1
 800244a:	4622      	mov	r2, r4
 800244c:	4649      	mov	r1, r9
 800244e:	4638      	mov	r0, r7
 8002450:	47c0      	blx	r8
 8002452:	3001      	adds	r0, #1
 8002454:	d0e6      	beq.n	8002424 <_printf_common+0xa8>
 8002456:	3601      	adds	r6, #1
 8002458:	e7d9      	b.n	800240e <_printf_common+0x92>
	...

0800245c <_printf_i>:
 800245c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002460:	7e0f      	ldrb	r7, [r1, #24]
 8002462:	4691      	mov	r9, r2
 8002464:	2f78      	cmp	r7, #120	; 0x78
 8002466:	4680      	mov	r8, r0
 8002468:	460c      	mov	r4, r1
 800246a:	469a      	mov	sl, r3
 800246c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800246e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002472:	d807      	bhi.n	8002484 <_printf_i+0x28>
 8002474:	2f62      	cmp	r7, #98	; 0x62
 8002476:	d80a      	bhi.n	800248e <_printf_i+0x32>
 8002478:	2f00      	cmp	r7, #0
 800247a:	f000 80d9 	beq.w	8002630 <_printf_i+0x1d4>
 800247e:	2f58      	cmp	r7, #88	; 0x58
 8002480:	f000 80a4 	beq.w	80025cc <_printf_i+0x170>
 8002484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800248c:	e03a      	b.n	8002504 <_printf_i+0xa8>
 800248e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002492:	2b15      	cmp	r3, #21
 8002494:	d8f6      	bhi.n	8002484 <_printf_i+0x28>
 8002496:	a101      	add	r1, pc, #4	; (adr r1, 800249c <_printf_i+0x40>)
 8002498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800249c:	080024f5 	.word	0x080024f5
 80024a0:	08002509 	.word	0x08002509
 80024a4:	08002485 	.word	0x08002485
 80024a8:	08002485 	.word	0x08002485
 80024ac:	08002485 	.word	0x08002485
 80024b0:	08002485 	.word	0x08002485
 80024b4:	08002509 	.word	0x08002509
 80024b8:	08002485 	.word	0x08002485
 80024bc:	08002485 	.word	0x08002485
 80024c0:	08002485 	.word	0x08002485
 80024c4:	08002485 	.word	0x08002485
 80024c8:	08002617 	.word	0x08002617
 80024cc:	08002539 	.word	0x08002539
 80024d0:	080025f9 	.word	0x080025f9
 80024d4:	08002485 	.word	0x08002485
 80024d8:	08002485 	.word	0x08002485
 80024dc:	08002639 	.word	0x08002639
 80024e0:	08002485 	.word	0x08002485
 80024e4:	08002539 	.word	0x08002539
 80024e8:	08002485 	.word	0x08002485
 80024ec:	08002485 	.word	0x08002485
 80024f0:	08002601 	.word	0x08002601
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	1d1a      	adds	r2, r3, #4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	602a      	str	r2, [r5, #0]
 80024fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002504:	2301      	movs	r3, #1
 8002506:	e0a4      	b.n	8002652 <_printf_i+0x1f6>
 8002508:	6820      	ldr	r0, [r4, #0]
 800250a:	6829      	ldr	r1, [r5, #0]
 800250c:	0606      	lsls	r6, r0, #24
 800250e:	f101 0304 	add.w	r3, r1, #4
 8002512:	d50a      	bpl.n	800252a <_printf_i+0xce>
 8002514:	680e      	ldr	r6, [r1, #0]
 8002516:	602b      	str	r3, [r5, #0]
 8002518:	2e00      	cmp	r6, #0
 800251a:	da03      	bge.n	8002524 <_printf_i+0xc8>
 800251c:	232d      	movs	r3, #45	; 0x2d
 800251e:	4276      	negs	r6, r6
 8002520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002524:	230a      	movs	r3, #10
 8002526:	485e      	ldr	r0, [pc, #376]	; (80026a0 <_printf_i+0x244>)
 8002528:	e019      	b.n	800255e <_printf_i+0x102>
 800252a:	680e      	ldr	r6, [r1, #0]
 800252c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002530:	602b      	str	r3, [r5, #0]
 8002532:	bf18      	it	ne
 8002534:	b236      	sxthne	r6, r6
 8002536:	e7ef      	b.n	8002518 <_printf_i+0xbc>
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	6820      	ldr	r0, [r4, #0]
 800253c:	1d19      	adds	r1, r3, #4
 800253e:	6029      	str	r1, [r5, #0]
 8002540:	0601      	lsls	r1, r0, #24
 8002542:	d501      	bpl.n	8002548 <_printf_i+0xec>
 8002544:	681e      	ldr	r6, [r3, #0]
 8002546:	e002      	b.n	800254e <_printf_i+0xf2>
 8002548:	0646      	lsls	r6, r0, #25
 800254a:	d5fb      	bpl.n	8002544 <_printf_i+0xe8>
 800254c:	881e      	ldrh	r6, [r3, #0]
 800254e:	2f6f      	cmp	r7, #111	; 0x6f
 8002550:	bf0c      	ite	eq
 8002552:	2308      	moveq	r3, #8
 8002554:	230a      	movne	r3, #10
 8002556:	4852      	ldr	r0, [pc, #328]	; (80026a0 <_printf_i+0x244>)
 8002558:	2100      	movs	r1, #0
 800255a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800255e:	6865      	ldr	r5, [r4, #4]
 8002560:	2d00      	cmp	r5, #0
 8002562:	bfa8      	it	ge
 8002564:	6821      	ldrge	r1, [r4, #0]
 8002566:	60a5      	str	r5, [r4, #8]
 8002568:	bfa4      	itt	ge
 800256a:	f021 0104 	bicge.w	r1, r1, #4
 800256e:	6021      	strge	r1, [r4, #0]
 8002570:	b90e      	cbnz	r6, 8002576 <_printf_i+0x11a>
 8002572:	2d00      	cmp	r5, #0
 8002574:	d04d      	beq.n	8002612 <_printf_i+0x1b6>
 8002576:	4615      	mov	r5, r2
 8002578:	fbb6 f1f3 	udiv	r1, r6, r3
 800257c:	fb03 6711 	mls	r7, r3, r1, r6
 8002580:	5dc7      	ldrb	r7, [r0, r7]
 8002582:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002586:	4637      	mov	r7, r6
 8002588:	42bb      	cmp	r3, r7
 800258a:	460e      	mov	r6, r1
 800258c:	d9f4      	bls.n	8002578 <_printf_i+0x11c>
 800258e:	2b08      	cmp	r3, #8
 8002590:	d10b      	bne.n	80025aa <_printf_i+0x14e>
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	07de      	lsls	r6, r3, #31
 8002596:	d508      	bpl.n	80025aa <_printf_i+0x14e>
 8002598:	6923      	ldr	r3, [r4, #16]
 800259a:	6861      	ldr	r1, [r4, #4]
 800259c:	4299      	cmp	r1, r3
 800259e:	bfde      	ittt	le
 80025a0:	2330      	movle	r3, #48	; 0x30
 80025a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80025aa:	1b52      	subs	r2, r2, r5
 80025ac:	6122      	str	r2, [r4, #16]
 80025ae:	464b      	mov	r3, r9
 80025b0:	4621      	mov	r1, r4
 80025b2:	4640      	mov	r0, r8
 80025b4:	f8cd a000 	str.w	sl, [sp]
 80025b8:	aa03      	add	r2, sp, #12
 80025ba:	f7ff fedf 	bl	800237c <_printf_common>
 80025be:	3001      	adds	r0, #1
 80025c0:	d14c      	bne.n	800265c <_printf_i+0x200>
 80025c2:	f04f 30ff 	mov.w	r0, #4294967295
 80025c6:	b004      	add	sp, #16
 80025c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025cc:	4834      	ldr	r0, [pc, #208]	; (80026a0 <_printf_i+0x244>)
 80025ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80025d2:	6829      	ldr	r1, [r5, #0]
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80025da:	6029      	str	r1, [r5, #0]
 80025dc:	061d      	lsls	r5, r3, #24
 80025de:	d514      	bpl.n	800260a <_printf_i+0x1ae>
 80025e0:	07df      	lsls	r7, r3, #31
 80025e2:	bf44      	itt	mi
 80025e4:	f043 0320 	orrmi.w	r3, r3, #32
 80025e8:	6023      	strmi	r3, [r4, #0]
 80025ea:	b91e      	cbnz	r6, 80025f4 <_printf_i+0x198>
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	f023 0320 	bic.w	r3, r3, #32
 80025f2:	6023      	str	r3, [r4, #0]
 80025f4:	2310      	movs	r3, #16
 80025f6:	e7af      	b.n	8002558 <_printf_i+0xfc>
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	f043 0320 	orr.w	r3, r3, #32
 80025fe:	6023      	str	r3, [r4, #0]
 8002600:	2378      	movs	r3, #120	; 0x78
 8002602:	4828      	ldr	r0, [pc, #160]	; (80026a4 <_printf_i+0x248>)
 8002604:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002608:	e7e3      	b.n	80025d2 <_printf_i+0x176>
 800260a:	0659      	lsls	r1, r3, #25
 800260c:	bf48      	it	mi
 800260e:	b2b6      	uxthmi	r6, r6
 8002610:	e7e6      	b.n	80025e0 <_printf_i+0x184>
 8002612:	4615      	mov	r5, r2
 8002614:	e7bb      	b.n	800258e <_printf_i+0x132>
 8002616:	682b      	ldr	r3, [r5, #0]
 8002618:	6826      	ldr	r6, [r4, #0]
 800261a:	1d18      	adds	r0, r3, #4
 800261c:	6961      	ldr	r1, [r4, #20]
 800261e:	6028      	str	r0, [r5, #0]
 8002620:	0635      	lsls	r5, r6, #24
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	d501      	bpl.n	800262a <_printf_i+0x1ce>
 8002626:	6019      	str	r1, [r3, #0]
 8002628:	e002      	b.n	8002630 <_printf_i+0x1d4>
 800262a:	0670      	lsls	r0, r6, #25
 800262c:	d5fb      	bpl.n	8002626 <_printf_i+0x1ca>
 800262e:	8019      	strh	r1, [r3, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	4615      	mov	r5, r2
 8002634:	6123      	str	r3, [r4, #16]
 8002636:	e7ba      	b.n	80025ae <_printf_i+0x152>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	2100      	movs	r1, #0
 800263c:	1d1a      	adds	r2, r3, #4
 800263e:	602a      	str	r2, [r5, #0]
 8002640:	681d      	ldr	r5, [r3, #0]
 8002642:	6862      	ldr	r2, [r4, #4]
 8002644:	4628      	mov	r0, r5
 8002646:	f000 f8d9 	bl	80027fc <memchr>
 800264a:	b108      	cbz	r0, 8002650 <_printf_i+0x1f4>
 800264c:	1b40      	subs	r0, r0, r5
 800264e:	6060      	str	r0, [r4, #4]
 8002650:	6863      	ldr	r3, [r4, #4]
 8002652:	6123      	str	r3, [r4, #16]
 8002654:	2300      	movs	r3, #0
 8002656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800265a:	e7a8      	b.n	80025ae <_printf_i+0x152>
 800265c:	462a      	mov	r2, r5
 800265e:	4649      	mov	r1, r9
 8002660:	4640      	mov	r0, r8
 8002662:	6923      	ldr	r3, [r4, #16]
 8002664:	47d0      	blx	sl
 8002666:	3001      	adds	r0, #1
 8002668:	d0ab      	beq.n	80025c2 <_printf_i+0x166>
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	079b      	lsls	r3, r3, #30
 800266e:	d413      	bmi.n	8002698 <_printf_i+0x23c>
 8002670:	68e0      	ldr	r0, [r4, #12]
 8002672:	9b03      	ldr	r3, [sp, #12]
 8002674:	4298      	cmp	r0, r3
 8002676:	bfb8      	it	lt
 8002678:	4618      	movlt	r0, r3
 800267a:	e7a4      	b.n	80025c6 <_printf_i+0x16a>
 800267c:	2301      	movs	r3, #1
 800267e:	4632      	mov	r2, r6
 8002680:	4649      	mov	r1, r9
 8002682:	4640      	mov	r0, r8
 8002684:	47d0      	blx	sl
 8002686:	3001      	adds	r0, #1
 8002688:	d09b      	beq.n	80025c2 <_printf_i+0x166>
 800268a:	3501      	adds	r5, #1
 800268c:	68e3      	ldr	r3, [r4, #12]
 800268e:	9903      	ldr	r1, [sp, #12]
 8002690:	1a5b      	subs	r3, r3, r1
 8002692:	42ab      	cmp	r3, r5
 8002694:	dcf2      	bgt.n	800267c <_printf_i+0x220>
 8002696:	e7eb      	b.n	8002670 <_printf_i+0x214>
 8002698:	2500      	movs	r5, #0
 800269a:	f104 0619 	add.w	r6, r4, #25
 800269e:	e7f5      	b.n	800268c <_printf_i+0x230>
 80026a0:	08002af1 	.word	0x08002af1
 80026a4:	08002b02 	.word	0x08002b02

080026a8 <_sbrk_r>:
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	2300      	movs	r3, #0
 80026ac:	4d05      	ldr	r5, [pc, #20]	; (80026c4 <_sbrk_r+0x1c>)
 80026ae:	4604      	mov	r4, r0
 80026b0:	4608      	mov	r0, r1
 80026b2:	602b      	str	r3, [r5, #0]
 80026b4:	f7fe f844 	bl	8000740 <_sbrk>
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	d102      	bne.n	80026c2 <_sbrk_r+0x1a>
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	b103      	cbz	r3, 80026c2 <_sbrk_r+0x1a>
 80026c0:	6023      	str	r3, [r4, #0]
 80026c2:	bd38      	pop	{r3, r4, r5, pc}
 80026c4:	20000154 	.word	0x20000154

080026c8 <__sread>:
 80026c8:	b510      	push	{r4, lr}
 80026ca:	460c      	mov	r4, r1
 80026cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d0:	f000 f8ae 	bl	8002830 <_read_r>
 80026d4:	2800      	cmp	r0, #0
 80026d6:	bfab      	itete	ge
 80026d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80026da:	89a3      	ldrhlt	r3, [r4, #12]
 80026dc:	181b      	addge	r3, r3, r0
 80026de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026e2:	bfac      	ite	ge
 80026e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80026e6:	81a3      	strhlt	r3, [r4, #12]
 80026e8:	bd10      	pop	{r4, pc}

080026ea <__swrite>:
 80026ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ee:	461f      	mov	r7, r3
 80026f0:	898b      	ldrh	r3, [r1, #12]
 80026f2:	4605      	mov	r5, r0
 80026f4:	05db      	lsls	r3, r3, #23
 80026f6:	460c      	mov	r4, r1
 80026f8:	4616      	mov	r6, r2
 80026fa:	d505      	bpl.n	8002708 <__swrite+0x1e>
 80026fc:	2302      	movs	r3, #2
 80026fe:	2200      	movs	r2, #0
 8002700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002704:	f000 f868 	bl	80027d8 <_lseek_r>
 8002708:	89a3      	ldrh	r3, [r4, #12]
 800270a:	4632      	mov	r2, r6
 800270c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002710:	81a3      	strh	r3, [r4, #12]
 8002712:	4628      	mov	r0, r5
 8002714:	463b      	mov	r3, r7
 8002716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800271a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800271e:	f000 b817 	b.w	8002750 <_write_r>

08002722 <__sseek>:
 8002722:	b510      	push	{r4, lr}
 8002724:	460c      	mov	r4, r1
 8002726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272a:	f000 f855 	bl	80027d8 <_lseek_r>
 800272e:	1c43      	adds	r3, r0, #1
 8002730:	89a3      	ldrh	r3, [r4, #12]
 8002732:	bf15      	itete	ne
 8002734:	6560      	strne	r0, [r4, #84]	; 0x54
 8002736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800273a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800273e:	81a3      	strheq	r3, [r4, #12]
 8002740:	bf18      	it	ne
 8002742:	81a3      	strhne	r3, [r4, #12]
 8002744:	bd10      	pop	{r4, pc}

08002746 <__sclose>:
 8002746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800274a:	f000 b813 	b.w	8002774 <_close_r>
	...

08002750 <_write_r>:
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	4604      	mov	r4, r0
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	2200      	movs	r2, #0
 800275a:	4d05      	ldr	r5, [pc, #20]	; (8002770 <_write_r+0x20>)
 800275c:	602a      	str	r2, [r5, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	f7fd ffd4 	bl	800070c <_write>
 8002764:	1c43      	adds	r3, r0, #1
 8002766:	d102      	bne.n	800276e <_write_r+0x1e>
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	b103      	cbz	r3, 800276e <_write_r+0x1e>
 800276c:	6023      	str	r3, [r4, #0]
 800276e:	bd38      	pop	{r3, r4, r5, pc}
 8002770:	20000154 	.word	0x20000154

08002774 <_close_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	2300      	movs	r3, #0
 8002778:	4d05      	ldr	r5, [pc, #20]	; (8002790 <_close_r+0x1c>)
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	602b      	str	r3, [r5, #0]
 8002780:	f7fd ffd2 	bl	8000728 <_close>
 8002784:	1c43      	adds	r3, r0, #1
 8002786:	d102      	bne.n	800278e <_close_r+0x1a>
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	b103      	cbz	r3, 800278e <_close_r+0x1a>
 800278c:	6023      	str	r3, [r4, #0]
 800278e:	bd38      	pop	{r3, r4, r5, pc}
 8002790:	20000154 	.word	0x20000154

08002794 <_fstat_r>:
 8002794:	b538      	push	{r3, r4, r5, lr}
 8002796:	2300      	movs	r3, #0
 8002798:	4d06      	ldr	r5, [pc, #24]	; (80027b4 <_fstat_r+0x20>)
 800279a:	4604      	mov	r4, r0
 800279c:	4608      	mov	r0, r1
 800279e:	4611      	mov	r1, r2
 80027a0:	602b      	str	r3, [r5, #0]
 80027a2:	f7fd ffc4 	bl	800072e <_fstat>
 80027a6:	1c43      	adds	r3, r0, #1
 80027a8:	d102      	bne.n	80027b0 <_fstat_r+0x1c>
 80027aa:	682b      	ldr	r3, [r5, #0]
 80027ac:	b103      	cbz	r3, 80027b0 <_fstat_r+0x1c>
 80027ae:	6023      	str	r3, [r4, #0]
 80027b0:	bd38      	pop	{r3, r4, r5, pc}
 80027b2:	bf00      	nop
 80027b4:	20000154 	.word	0x20000154

080027b8 <_isatty_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	2300      	movs	r3, #0
 80027bc:	4d05      	ldr	r5, [pc, #20]	; (80027d4 <_isatty_r+0x1c>)
 80027be:	4604      	mov	r4, r0
 80027c0:	4608      	mov	r0, r1
 80027c2:	602b      	str	r3, [r5, #0]
 80027c4:	f7fd ffb8 	bl	8000738 <_isatty>
 80027c8:	1c43      	adds	r3, r0, #1
 80027ca:	d102      	bne.n	80027d2 <_isatty_r+0x1a>
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	b103      	cbz	r3, 80027d2 <_isatty_r+0x1a>
 80027d0:	6023      	str	r3, [r4, #0]
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
 80027d4:	20000154 	.word	0x20000154

080027d8 <_lseek_r>:
 80027d8:	b538      	push	{r3, r4, r5, lr}
 80027da:	4604      	mov	r4, r0
 80027dc:	4608      	mov	r0, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	2200      	movs	r2, #0
 80027e2:	4d05      	ldr	r5, [pc, #20]	; (80027f8 <_lseek_r+0x20>)
 80027e4:	602a      	str	r2, [r5, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f7fd ffa8 	bl	800073c <_lseek>
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	d102      	bne.n	80027f6 <_lseek_r+0x1e>
 80027f0:	682b      	ldr	r3, [r5, #0]
 80027f2:	b103      	cbz	r3, 80027f6 <_lseek_r+0x1e>
 80027f4:	6023      	str	r3, [r4, #0]
 80027f6:	bd38      	pop	{r3, r4, r5, pc}
 80027f8:	20000154 	.word	0x20000154

080027fc <memchr>:
 80027fc:	4603      	mov	r3, r0
 80027fe:	b510      	push	{r4, lr}
 8002800:	b2c9      	uxtb	r1, r1
 8002802:	4402      	add	r2, r0
 8002804:	4293      	cmp	r3, r2
 8002806:	4618      	mov	r0, r3
 8002808:	d101      	bne.n	800280e <memchr+0x12>
 800280a:	2000      	movs	r0, #0
 800280c:	e003      	b.n	8002816 <memchr+0x1a>
 800280e:	7804      	ldrb	r4, [r0, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	428c      	cmp	r4, r1
 8002814:	d1f6      	bne.n	8002804 <memchr+0x8>
 8002816:	bd10      	pop	{r4, pc}

08002818 <__malloc_lock>:
 8002818:	4801      	ldr	r0, [pc, #4]	; (8002820 <__malloc_lock+0x8>)
 800281a:	f7ff bb13 	b.w	8001e44 <__retarget_lock_acquire_recursive>
 800281e:	bf00      	nop
 8002820:	20000148 	.word	0x20000148

08002824 <__malloc_unlock>:
 8002824:	4801      	ldr	r0, [pc, #4]	; (800282c <__malloc_unlock+0x8>)
 8002826:	f7ff bb0e 	b.w	8001e46 <__retarget_lock_release_recursive>
 800282a:	bf00      	nop
 800282c:	20000148 	.word	0x20000148

08002830 <_read_r>:
 8002830:	b538      	push	{r3, r4, r5, lr}
 8002832:	4604      	mov	r4, r0
 8002834:	4608      	mov	r0, r1
 8002836:	4611      	mov	r1, r2
 8002838:	2200      	movs	r2, #0
 800283a:	4d05      	ldr	r5, [pc, #20]	; (8002850 <_read_r+0x20>)
 800283c:	602a      	str	r2, [r5, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	f7fd ff54 	bl	80006ec <_read>
 8002844:	1c43      	adds	r3, r0, #1
 8002846:	d102      	bne.n	800284e <_read_r+0x1e>
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	b103      	cbz	r3, 800284e <_read_r+0x1e>
 800284c:	6023      	str	r3, [r4, #0]
 800284e:	bd38      	pop	{r3, r4, r5, pc}
 8002850:	20000154 	.word	0x20000154

08002854 <_init>:
 8002854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002856:	bf00      	nop
 8002858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285a:	bc08      	pop	{r3}
 800285c:	469e      	mov	lr, r3
 800285e:	4770      	bx	lr

08002860 <_fini>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	bf00      	nop
 8002864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002866:	bc08      	pop	{r3}
 8002868:	469e      	mov	lr, r3
 800286a:	4770      	bx	lr
